// Polyfill for creating CustomEvents on IE9/10/11

// code pulled from:
// https://github.com/d4tocchini/customevent-polyfill
// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent#Polyfill

(function() {
  if (typeof window === 'undefined') {
    return;
  }

  try {
    var ce = new window.CustomEvent('test', { cancelable: true });
    ce.preventDefault();
    if (ce.defaultPrevented !== true) {
      // IE has problems with .preventDefault() on custom events
      // http://stackoverflow.com/questions/23349191
      throw new Error('Could not prevent default');
    }
  } catch (e) {
    var CustomEvent = function(event, params) {
      var evt, origPrevent;
      params = params || {
        bubbles: false,
        cancelable: false,
        detail: undefined
      };

      evt = document.createEvent('CustomEvent');
      evt.initCustomEvent(
        event,
        params.bubbles,
        params.cancelable,
        params.detail
      );
      origPrevent = evt.preventDefault;
      evt.preventDefault = function() {
        origPrevent.call(this);
        try {
          Object.defineProperty(this, 'defaultPrevented', {
            get: function() {
              return true;
            }
          });
        } catch (e) {
          this.defaultPrevented = true;
        }
      };
      return evt;
    };

    CustomEvent.prototype = window.Event.prototype;
    window.CustomEvent = CustomEvent; // expose definition to window
  }
})();
'use strict';

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es6.function.name");

require("core-js/modules/es6.date.now");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.array.sort");

require("core-js/modules/es6.regexp.replace");

require("core-js/modules/es6.array.is-array");

require("core-js/modules/es7.array.includes");

require("core-js/modules/es6.string.includes");

require("core-js/modules/es6.regexp.flags");

require("core-js/modules/es6.regexp.to-string");

require("core-js/modules/es6.date.to-string");

require("core-js/modules/es6.array.some");

require("core-js/modules/es6.date.to-iso-string");

require("core-js/modules/es6.regexp.match");

require("core-js/modules/es6.function.bind");

require("core-js/modules/es6.number.constructor");

require("core-js/modules/es6.array.map");

require("core-js/modules/es6.regexp.split");

require("core-js/modules/es6.array.index-of");

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.array.from");

require("core-js/modules/es6.array.filter");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.for-each");

require("core-js/modules/es6.object.define-property");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopDefault(ex) {
  return ex && _typeof(ex) === 'object' && 'default' in ex ? ex['default'] : ex;
}

var dragula = _interopDefault(require('dragula/dist/dragula.min'));

var d3 = require('d3');

var mapboxgl = _interopDefault(require('mapbox-gl'));

var Accordion =
/*#__PURE__*/
function () {
  _createClass(Accordion, null, [{
    key: "toggleAccordion",
    value: function toggleAccordion(li) {
      li.classList.toggle('opened');
    }
  }]);

  function Accordion(element) {
    _classCallCheck(this, Accordion);

    this.dom = {
      accordion: element,
      lis: element.querySelectorAll('li')
    };
  }

  _createClass(Accordion, [{
    key: "init",
    value: function init() {
      this.handleEventListeners();
    }
  }, {
    key: "handleEventListeners",
    value: function handleEventListeners(type) {
      Array.from(this.dom.lis).filter(function (li) {
        return li.querySelector('.title');
      }).forEach(function (li) {
        if (type === 'remove') {
          li.querySelector('.title').removeEventListener('click', function () {
            return Accordion.toggleAccordion(li);
          }, false);
        } else {
          li.querySelector('.title').addEventListener('click', function () {
            return Accordion.toggleAccordion(li);
          }, false);
        }
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.handleEventListeners('remove'); // and other tasks to be run once at destruction
    }
  }]);

  return Accordion;
}();

var Appbar =
/*#__PURE__*/
function () {
  function Appbar(element) {
    var _this2 = this;

    _classCallCheck(this, Appbar);

    this.dom = {
      appbar: element,
      navItem: element.querySelector('.actions-left .item'),
      navToggle: element.querySelector('.actions-left .item .navigation-toggle'),
      menuAnchor: element.querySelector('.actions-left .menu-anchor'),
      title: element.querySelector('.actions-left .title')
    };
    this.events = {
      toggleNavigation: new CustomEvent('toggleNavigation'),
      showNavigation: new CustomEvent('showNavigation'),
      hideNavigation: new CustomEvent('hideNavigation')
    };
    this.listeners = {
      toggleNavigation: function toggleNavigation() {
        return _this2.toggle();
      },
      hideNavigation: function hideNavigation() {
        return _this2.hide();
      },
      showNavigation: function showNavigation() {
        return _this2.show();
      }
    };
  }

  _createClass(Appbar, [{
    key: "init",
    value: function init() {
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      this.dom.navItem.addEventListener('click', this.listeners.toggleNavigation, false);
      this.dom.menuAnchor.addEventListener('click', this.listeners.toggleNavigation, false);
      document.addEventListener('hideNavigation', this.listeners.hideNavigation, false);
      document.addEventListener('showNavigation', this.listeners.showNavigation, false); // window.addEventListener('toggleNavigation', this.listeners.toggleNavigation, false);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      this.dom.navItem.removeEventListener('click', this.listeners.toggleNavigation, false);
      this.dom.menuAnchor.removeEventListener('click', this.listeners.toggleNavigation, false);
      document.removeEventListener('hideNavigation', this.listeners.hideNavigation, false);
      document.removeEventListener('showNavigation', this.listeners.showNavigation, false);
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (this.dom.title.classList.contains('open-menu')) {
        this.hide();
      } else {
        this.show();
      }

      document.dispatchEvent(this.events.toggleNavigation);
    }
  }, {
    key: "hide",
    value: function hide() {
      this.dom.title.classList.remove('open-menu');
      this.dom.menuAnchor.classList.remove('open-menu');
      this.dom.navToggle.classList.remove('closed');
    }
  }, {
    key: "show",
    value: function show() {
      this.dom.title.classList.add('open-menu');
      this.dom.menuAnchor.classList.add('open-menu');
      this.dom.navToggle.classList.add('closed');
    }
  }]);

  return Appbar;
}();

var Appnav =
/*#__PURE__*/
function () {
  function Appnav(element) {
    var _this3 = this;

    _classCallCheck(this, Appnav);

    this.dom = {
      appnav: element
    };
    this.listeners = {
      toggleNavigation: function toggleNavigation() {
        return _this3.toggle();
      },
      showNavigation: function showNavigation() {
        return _this3.show();
      },
      hideNavigation: function hideNavigation() {
        return _this3.hide();
      }
    };
  }

  _createClass(Appnav, [{
    key: "init",
    value: function init() {
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      document.addEventListener('toggleNavigation', this.listeners.toggleNavigation, false);
      document.addEventListener('showNavigation', this.listeners.showNavigation, false);
      document.addEventListener('hideNavigation', this.listeners.hideNavigation, false);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      document.removeEventListener('toggleNavigation', this.listeners.toggleNavigation, false);
      document.removeEventListener('showNavigation', this.listeners.showNavigation, false);
      document.removeEventListener('hideNavigation', this.listeners.hideNavigation, false);
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (this.dom.appnav.classList.contains('hidden')) {
        this.show();
      } else {
        this.hide();
      }
    }
  }, {
    key: "show",
    value: function show() {
      this.dom.appnav.classList.remove('hidden');
    }
  }, {
    key: "hide",
    value: function hide() {
      this.dom.appnav.classList.add('hidden');
    }
  }]);

  return Appnav;
}();

var Calendar =
/*#__PURE__*/
function () {
  function Calendar(element) {
    _classCallCheck(this, Calendar);

    this.dom = {
      calendar: element,
      year: element.querySelector('.year'),
      month: element.querySelector('.month'),
      days: undefined,
      prevYear: element.querySelector('.head i:nth-child(4)'),
      prevMonth: element.querySelector('.head i:nth-child(1)'),
      nextMonth: element.querySelector('.head i:nth-child(3)'),
      nextYear: element.querySelector('.head i:nth-child(6)'),
      body: element.querySelector('table.body')
    };
    this.eng = {
      months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
      days: ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su']
    };
    this.calendar = {
      year: '',
      month: '',
      days: []
    };
  }

  _createClass(Calendar, [{
    key: "init",
    value: function init() {
      this.createCalendarBody();
      this.setDataCalendar(new Date());
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this4 = this;

      this.dom.prevYear.addEventListener('click', function () {
        return _this4.prevYear();
      }, false);
      this.dom.prevMonth.addEventListener('click', function () {
        return _this4.prevMonth();
      }, false);
      this.dom.nextMonth.addEventListener('click', function () {
        return _this4.nextMonth();
      }, false);
      this.dom.nextYear.addEventListener('click', function () {
        return _this4.nextYear();
      }, false);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this5 = this;

      this.dom.prevYear.removeEventListener('click', function () {
        return _this5.prevYear();
      }, false);
      this.dom.prevMonth.removeEventListener('click', function () {
        return _this5.prevMonth();
      }, false);
      this.dom.nextMonth.removeEventListener('click', function () {
        return _this5.nextMonth();
      }, false);
      this.dom.nextYear.removeEventListener('click', function () {
        return _this5.nextYear();
      }, false);
    }
  }, {
    key: "prevYear",
    value: function prevYear() {
      // YYYY-MM-DD format
      var modifiedDate = this.formatDate({
        year: parseInt(this.calendar.year, 10) - 1,
        month: this.calendar.month,
        day: '1'
      });
      this.setDataCalendar(new Date(modifiedDate));
      this.removeAllSelectedDays();
    }
  }, {
    key: "prevMonth",
    value: function prevMonth() {
      var year = this.calendar.year;
      var monthNum = this.eng.months.indexOf(this.calendar.month); // decrement month

      if (monthNum === 0) {
        monthNum = 11;
        year = parseInt(this.calendar.year, 10) - 1;
      } else {
        monthNum -= 1;
      }

      var modifiedDate = this.formatDate({
        year: year,
        month: this.eng.months[monthNum],
        day: '1'
      });
      this.setDataCalendar(new Date(modifiedDate));
      this.removeAllSelectedDays();
    }
  }, {
    key: "nextMonth",
    value: function nextMonth() {
      var year = this.calendar.year;
      var monthNum = this.eng.months.indexOf(this.calendar.month); // increment month

      if (monthNum === 11) {
        monthNum = 0;
        year = parseInt(this.calendar.year, 10) + 1;
      } else {
        monthNum += 1;
      }

      var modifiedDate = this.formatDate({
        year: year,
        month: this.eng.months[monthNum],
        day: '1'
      });
      this.setDataCalendar(new Date(modifiedDate));
      this.removeAllSelectedDays();
    }
  }, {
    key: "nextYear",
    value: function nextYear() {
      var modifiedDate = this.formatDate({
        year: parseInt(this.calendar.year, 10) + 1,
        month: this.calendar.month,
        day: '1'
      });
      this.setDataCalendar(new Date(modifiedDate));
      this.removeAllSelectedDays();
    } // Creates the necessary tr and td elements.

  }, {
    key: "createCalendarBody",
    value: function createCalendarBody() {
      // table head
      var thead = document.createElement('thead');
      var trHead = document.createElement('tr');

      for (var d = 0; d < 7; d += 1) {
        var th = document.createElement('th');
        th.innerHTML = this.eng.days[d];
        trHead.appendChild(th);
      }

      thead.appendChild(trHead);
      this.dom.body.appendChild(thead); // table body

      var tbody = document.createElement('tbody');
      var numTD = 7; // 7 days / week

      var numTR = 6; // 6 weeks / month

      var j = 0;

      for (; j < numTR; j += 1) {
        var tr = document.createElement('tr');

        for (var i = 0; i < numTD; i += 1) {
          var td = document.createElement('td');
          tr.appendChild(td);
        }

        tbody.appendChild(tr);
      }

      this.dom.body.appendChild(tbody); // update the constructor value 'days'

      this.dom.days = this.dom.calendar.querySelectorAll('td');
    } // fills in the DOM content with this.calendar information

  }, {
    key: "setDOMCalendar",
    value: function setDOMCalendar() {
      var _this6 = this;

      var today = this.yyyymmdd(new Date()).split('-');
      this.dom.month.innerText = this.calendar.month;
      this.dom.year.innerText = this.calendar.year;
      Array.from(this.dom.days).forEach(function (dayDOM, i) {
        var dayValue = _this6.calendar.days[i];

        if (dayValue !== 0) {
          dayDOM.innerText = dayValue;
          dayDOM.classList.remove('dummy');

          if (today[0] === _this6.calendar.year && today[1] === _this6.eng.months.indexOf(_this6.calendar.month) + 1 && today[2] === _this6.calendar.days[i]) {
            dayDOM.innerHTML = '<span class="today">' + dayValue + '</span>';
          }
        } else {
          dayDOM.innerText = '';
          dayDOM.classList.add('dummy');
        }
      });
    }
  }, {
    key: "setDataCalendar",
    value: function setDataCalendar(date) {
      var dArray = this.yyyymmdd(date).split('-');
      var jsDate = new Date(dArray[0], dArray[1] - 1, 1);
      var lastDayMonth = new Date(dArray[0], dArray[1], 0);
      var daysInMonthNum = lastDayMonth.getDate();
      var dayOfWeekNum = jsDate.getUTCDay(); // const lastDayOfWeekNum = lastDayMonth.getUTCDay();

      this.calendar.year = dArray[0];
      this.calendar.month = this.eng.months[dArray[1] - 1]; // create 0's at the head

      var headZeroes = Array.apply(null, {
        length: dayOfWeekNum
      }).map(Number.prototype.valueOf, 0); // create day numbers != 0

      var numbersInRow = Array.apply(null, {
        length: daysInMonthNum + 1
      }).map(Number.call, Number);
      numbersInRow.shift(); // create 0's at the tail

      var numZeroes = 42 - (headZeroes.length + numbersInRow.length);
      var tailZeroes = Array.apply(null, Array(numZeroes)).map(Number.prototype.valueOf, 0); // concat all the days and add to calendar

      this.calendar.days = headZeroes.concat(numbersInRow, tailZeroes); // Updates the values of the DOM with the current calendar data

      this.setDOMCalendar();
    } // given a js Date Object return a string in YYYY-MM-DD format

  }, {
    key: "yyyymmdd",
    value: function yyyymmdd(jsDate) {
      var mm = jsDate.getMonth() + 1;
      var dd = jsDate.getDate();
      return [jsDate.getFullYear(), (mm > 9 ? '' : '0') + mm, (dd > 9 ? '' : '0') + dd].join('-');
    }
  }, {
    key: "formatDate",
    value: function formatDate(date) {
      return date.year + '-' + this.getMonthNum(date.month) + '-' + this.getDayNum(date.day);
    }
  }, {
    key: "getMonthNum",
    value: function getMonthNum(month) {
      var n = this.eng.months.indexOf(month) + 1;
      return n < 10 ? '0' + n : n;
    }
  }, {
    key: "getDayNum",
    value: function getDayNum(day) {
      return day < 10 ? '0' + day : day;
    }
  }, {
    key: "removeAllSelectedDays",
    value: function removeAllSelectedDays() {
      Array.from(this.dom.days).forEach(function (day) {
        day.classList.remove('selected');
      });
    }
  }]);

  return Calendar;
}();

var Card =
/*#__PURE__*/
function () {
  function Card(element) {
    _classCallCheck(this, Card);

    this.dom = {
      card: element
    };
  }

  _createClass(Card, [{
    key: "init",
    value: function init() {
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListerners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      this.dom.card.addEventListener('click', this.selectCard.bind(this));
    }
  }, {
    key: "removeEventListerners",
    value: function removeEventListerners() {
      this.dom.card.removeEventListener('click', this.selectCard);
    }
  }, {
    key: "selectCard",
    value: function selectCard() {
      this.dom.card.classList.toggle('selected');
    }
  }]);

  return Card;
}();

var Datepicker =
/*#__PURE__*/
function () {
  function Datepicker(element) {
    _classCallCheck(this, Datepicker);

    this.dom = {
      datepicker: element,
      calendar: element.querySelector('.calendar'),
      button: element.querySelector('.btn, .clickable'),
      input: element.querySelector('input[type="text"]'),
      days: null,
      hiddenInput: element.querySelector('input[type="hidden"]')
    };
    this.listeners = {
      ifClickedOutside: this.ifClickedOutside.bind(this),
      selectDay: this.selectDay.bind(this),
      toggleCalendar: this.toggleCalendar.bind(this),
      listenInput: this.listenInput.bind(this)
    };
    this.calendar = null;
    this.selectedDate = null;
  }

  _createClass(Datepicker, [{
    key: "init",
    value: function init() {
      this.calendar = new Calendar(this.dom.calendar);
      this.calendar.init();
      this.dom.days = this.dom.calendar.querySelectorAll('td');
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _self = this;

      this.dom.button.removeEventListener('click', function () {
        return _self.listeners.toggleCalendar();
      }, false);
      Array.from(this.dom.days).forEach(function (day) {
        day.removeEventListener('click', function (e) {
          return _self.listeners.selectDay(e);
        }, false);
      });
      this.dom.input.removeEventListener('click', function () {
        return _self.listeners.toggleCalendar();
      }, false);
      this.dom.input.removeEventListener('keyup', function (e) {
        return _self.listeners.listenInput(e);
      }, false);
      document.removeEventListener('click', _self.listeners.ifClickedOutside, false);
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _self = this;

      this.dom.button.addEventListener('click', function () {
        return _self.listeners.toggleCalendar();
      }, false);
      Array.from(this.dom.days).forEach(function (day) {
        day.addEventListener('click', function (e) {
          return _self.listeners.selectDay(e);
        }, false);
      });
      this.dom.input.addEventListener('click', function () {
        return _self.listeners.toggleCalendar();
      }, false);
      this.dom.input.addEventListener('keyup', function (e) {
        return _self.listeners.listenInput(e);
      }, false);
      document.addEventListener('click', _self.listeners.ifClickedOutside, false);
    }
  }, {
    key: "isValidDate",
    value: function isValidDate(dateString) {
      var regEx = /^\d{4}-\d{2}-\d{2}$/; // Invalid format

      if (!dateString.match(regEx)) {
        return false;
      }

      var d = new Date(dateString); // Invalid date (or this could be epoch)

      if (!(d | 0)) {
        return false;
      }

      return d.toISOString().slice(0, 10) === dateString;
    }
  }, {
    key: "listenInput",
    value: function listenInput() {
      var typedInput = this.dom.input.value;

      if (typedInput.length === 10) {
        if (this.isValidDate(typedInput)) {
          this.calendar.setDataCalendar(new Date(typedInput));
          var dateArray = typedInput.split('-');
          this.selectedDate = {
            year: dateArray[0],
            month: dateArray[1],
            day: dateArray[2]
          };
          this.setSelectedDateCSS();
        } else {
          this.invalidDateFormat();
        }
      }
    } // set date to today when detecting an invalid date format

  }, {
    key: "invalidDateFormat",
    value: function invalidDateFormat() {
      var today = new Date();
      var todayYYYYMMDD = this.calendar.yyyymmdd(today).split('-');
      this.dom.input.value = todayYYYYMMDD.join('-');
      this.selectedDate = {
        year: todayYYYYMMDD[0],
        month: todayYYYYMMDD[1],
        day: todayYYYYMMDD[2]
      };
      this.calendar.setDataCalendar(new Date(today));
      this.calendar.removeAllSelectedDays();
      this.setSelectedDateCSS();
    }
  }, {
    key: "setSelectedDateCSS",
    value: function setSelectedDateCSS() {
      this.calendar.removeAllSelectedDays(); // convert to string for equality check

      var selectedDay = this.selectedDate ? this.selectedDate.day : new Date(this.dom.input.value).getDate() + '';
      Array.from(this.dom.days).some(function (day) {
        if (day.innerText === selectedDay) {
          day.classList.add('selected');
          return true;
        }
      });
    }
  }, {
    key: "selectDay",
    value: function selectDay(event) {
      // TODO: Is this just for testing or should this check be in production?
      if (!event.target.classList.contains('dummy')) {
        this.calendar.removeAllSelectedDays();
        this.selectedDate = {
          year: this.calendar.calendar.year,
          month: this.calendar.calendar.month,
          day: event.target.innerText
        };
        var formattedDate = this.calendar.formatDate(this.selectedDate);
        this.dom.input.value = this.dom.hiddenInput.value = formattedDate;

        if (event.target.tagName === 'TD') {
          event.target.classList.add('selected');
        } else {
          event.target.parentNode.classList.add('selected');
        }

        this.dom.input.dispatchEvent(new Event('change'));
        this.hide();
      }
    }
  }, {
    key: "hide",
    value: function hide() {
      this.dom.calendar.classList.add('closed');
    }
  }, {
    key: "show",
    value: function show() {
      this.dom.calendar.classList.remove('closed');
    }
  }, {
    key: "toggleCalendar",
    value: function toggleCalendar() {
      if (this.dom.calendar.classList.contains('closed')) {
        this.show();
      } else {
        this.hide();
      }

      var inputValue = this.dom.input.value; // not empty input

      if (inputValue) {
        if (this.isValidDate(inputValue)) {
          this.calendar.setDataCalendar(new Date(inputValue));
          this.setSelectedDateCSS();
        } else {
          this.invalidDateFormat();
        }
      }
    }
  }, {
    key: "ifClickedOutside",
    value: function ifClickedOutside(event) {
      if (!this.dom.datepicker.contains(event.target)) {
        this.hide();
      }
    }
  }]);

  return Datepicker;
}();

var Dialog =
/*#__PURE__*/
function () {
  function Dialog(element) {
    _classCallCheck(this, Dialog);

    this.dom = {
      dialog: element,
      content: element.querySelector('.content'),
      id: element.id,
      closeButton: undefined
    };
    this.type = element.dataset.type;
    this.trigger = element.dataset.trigger;
    this.events = {
      closeDialogEvent: new CustomEvent('DialogClose', {
        detail: {
          id: this.dom.id
        }
      }),
      showDialogEvent: new CustomEvent('DialogShow', {
        detail: {
          id: this.dom.id
        }
      })
    };
  }

  _createClass(Dialog, [{
    key: "init",
    value: function init() {
      this.getCloseButton();
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this7 = this;

      if (this.trigger) {
        var button = document.querySelector(this.trigger);
        button.removeEventListener('click', function () {
          return _this7.show();
        }, false);
      } else {
        this.dom.dialog.removeEventListener('triggerDialog', function () {});
      }

      switch (this.type) {
        case 'simple':
          this.dom.closeButton.removeEventListener('click', function () {
            return _this7.hide();
          }, false);
          break;

        case 'fullscreen':
          this.dom.closeButton.removeEventListener('click', function () {
            return _this7.hide();
          }, false);
          break;
      }
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this8 = this;

      if (this.trigger) {
        var button = document.querySelector(this.trigger);
        button.addEventListener('click', function () {
          return _this8.show();
        }, false);
      } else {
        this.dom.dialog.addEventListener('triggerDialog', function (e) {
          if (e.detail.id === _this8.dom.id) _this8.show();
        }, false);
      }

      switch (this.type) {
        case 'simple':
          this.dom.closeButton.addEventListener('click', function () {
            return _this8.hide();
          }, false);
          break;

        case 'fullscreen':
          this.dom.closeButton.addEventListener('click', function () {
            return _this8.hide();
          }, false);
          break;
      }
    }
  }, {
    key: "show",
    value: function show() {
      this.dom.dialog.classList.add('show');
      this.dom.dialog.dispatchEvent(this.events.showDialogEvent);
    }
  }, {
    key: "hide",
    value: function hide() {
      this.dom.dialog.classList.remove('show');
      this.dom.dialog.dispatchEvent(this.events.closeDialogEvent);
    }
    /*
     * clickedOutside() {
     *   if (event.target.classList.contains('dialog')) this.hide();
     * }
     */

  }, {
    key: "getCloseButton",
    value: function getCloseButton() {
      var _this9 = this;

      var buttons = this.dom.dialog.querySelectorAll('.btn');
      Array.from(buttons).forEach(function (button) {
        if (button.getAttribute('data-close')) {
          _this9.dom.closeButton = button;
        }
      }); // TODO: should there be an if state here?

      var icons = this.dom.dialog.querySelectorAll('.icon');
      Array.from(icons).forEach(function (icon) {
        if (icon.getAttribute('data-close')) {
          _this9.dom.closeButton = icon;
        }
      });
    }
  }]);

  return Dialog;
}();

var Drag =
/*#__PURE__*/
function () {
  function Drag() {
    _classCallCheck(this, Drag);
  }

  _createClass(Drag, null, [{
    key: "setContainers",
    value: function setContainers(args) {
      dragula(args); // TODO: Open issue: https://github.com/bevacqua/dragula/issues/487

      for (var i = 0; i < args.length; i += 1) {
        args[i].addEventListener('touchmove', function (e) {
          return e.preventDefault();
        });
      }
    }
  }]);

  return Drag;
}();

var Menu =
/*#__PURE__*/
function () {
  function Menu(element) {
    _classCallCheck(this, Menu);

    this.dom = {
      menu: element,
      items: element.querySelectorAll('.item'),
      emptyMessage: element.querySelector('.empty'),
      highlightItem: element.querySelector('.highlight')
    };
    this.max = element.getAttribute('data-display-max') || 5;
  }

  _createClass(Menu, [{
    key: "init",
    value: function init() {
      this.limitDisplayMaxItems();
    }
  }, {
    key: "unHighlightItem",
    value: function unHighlightItem(item) {
      item.classList.remove('highlight');
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (this.dom.menu.classList.contains('visible')) {
        this.hide();
      } else {
        this.show();
      }
    }
  }, {
    key: "show",
    value: function show() {
      this.dom.menu.classList.add('visible');
    }
  }, {
    key: "hide",
    value: function hide() {
      this.dom.menu.classList.remove('visible');
    }
  }, {
    key: "limitDisplayMaxItems",
    value: function limitDisplayMaxItems() {
      var _this10 = this;

      Array.from(this.dom.items).forEach(function (item) {
        return item.classList.add('hidden');
      });
      Array.from(this.dom.items).forEach(function (item, i) {
        if (i < _this10.max) item.classList.remove('hidden');
      });
    }
  }, {
    key: "showList",
    value: function showList(list) {
      var _this11 = this;

      // hide all items from the menu list
      Array.from(this.dom.items).forEach(function (item) {
        return item.classList.add('hidden');
      }); // remove the hidden class from those that appear in the filteredList

      Array.from(list).forEach(function (item, i) {
        if (i < _this11.max) item.classList.remove('hidden');
      });

      if (list.length === 0) {
        this.showEmptyState();
      } else {
        this.hideEmptyState();
      }
    }
  }, {
    key: "showEmptyState",
    value: function showEmptyState() {
      this.dom.emptyMessage.classList.add('visible');
    }
  }, {
    key: "hideEmptyState",
    value: function hideEmptyState() {
      this.dom.emptyMessage.classList.remove('visible');
    }
  }, {
    key: "unHighlightAll",
    value: function unHighlightAll() {
      var _this12 = this;

      Array.from(this.dom.items).forEach(function (item) {
        return _this12.unHighlightItem(item);
      });
    }
  }, {
    key: "getHighlightedItem",
    value: function getHighlightedItem() {
      return this.dom.menu.querySelector('.highlight');
    }
  }]);

  return Menu;
}();

var Dropdown =
/*#__PURE__*/
function () {
  function Dropdown(element) {
    _classCallCheck(this, Dropdown);

    this.dom = {
      dropdown: element,
      button: element.querySelector('.btn, .clickable'),
      checkboxes: element.querySelectorAll('input[type="checkbox"]'),
      menu: element.querySelector('.menu'),
      items: element.querySelectorAll('.item'),
      input: element.querySelector('input[type="text"]')
    };
    this.type = element.getAttribute('data-type') || undefined;
    this.initialLabel = this.dom.button.innerHTML;
    this.isDisabled = this.dom.dropdown.getAttribute('disabled') !== null;
    this.highlightIndex = -1;
  }

  _createClass(Dropdown, [{
    key: "init",
    value: function init() {
      if (this.dom.menu) {
        this.menu = new Menu(this.dom.menu);
        this.menu.init();
      }

      if (this.isDisabled) this.setDisabled();
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this13 = this;

      switch (this.type) {
        case 'click':
          this.dom.button.removeEventListener('click', function () {
            return _this13.menu.toggle();
          }, false);
          this.dom.menu.removeEventListener('click', function () {
            return _this13.menu.hide();
          });
          break;

        case 'single':
          this.dom.dropdown.removeEventListener('change', function (e) {
            return _this13.selectSingleOption(e);
          }, false);
          this.dom.button.removeEventListener('click', function () {
            return _this13.menu.toggle();
          }, false);
          this.dom.menu.removeEventListener('click', function () {
            return _this13.menu.hide();
          });
          break;

        case 'multi':
          this.dom.dropdown.removeEventListener('change', function () {
            return _this13.selectMultipleOptions();
          }, false);
          this.dom.button.removeEventListener('click', function () {
            return _this13.menu.toggle();
          }, false);
          break;

        case 'combo':
          this.dom.button.removeEventListener('click', function () {
            return _this13.menu.toggle();
          }, false);
          this.dom.menu.removeEventListener('click', function (e) {
            return _this13.setInputValue(e.target);
          }, false);
          this.dom.input.removeEventListener('click', function () {
            return _this13.menu.show();
          }, false);
          this.dom.input.removeEventListener('keyup', function (e) {
            _this13.menu.show();

            _this13.filterOptions();

            _this13.arrowKeySelection(e);
          }, false);
          this.dom.input.removeEventListener('mousemove', function () {
            return _this13.menu.unHighlightAll();
          }, false);
          break;
      }

      this.ifClickedOutside(function () {
        return _this13.menu.hide();
      }, 'remove');
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this14 = this;

      switch (this.type) {
        case 'click':
          this.dom.button.addEventListener('click', function () {
            return _this14.menu.toggle();
          }, false);
          this.dom.menu.addEventListener('click', function () {
            return _this14.menu.hide();
          });
          break;

        case 'single':
          this.dom.dropdown.addEventListener('change', function (e) {
            return _this14.selectSingleOption(e);
          }, false);
          this.dom.button.addEventListener('click', function () {
            return _this14.menu.toggle();
          }, false);
          this.dom.menu.addEventListener('click', function () {
            return _this14.menu.hide();
          });
          break;

        case 'multi':
          this.dom.dropdown.addEventListener('change', function () {
            return _this14.selectMultipleOptions();
          }, false);
          this.dom.button.addEventListener('click', function () {
            return _this14.menu.toggle();
          }, false);
          break;

        case 'combo':
          this.dom.button.addEventListener('click', function () {
            return _this14.menu.toggle();
          }, false);
          this.dom.menu.addEventListener('click', function (e) {
            return _this14.setInputValue(e.target);
          }, false);
          this.dom.input.addEventListener('click', function () {
            return _this14.menu.show();
          }, false);
          this.dom.input.addEventListener('keyup', function (e) {
            _this14.menu.show();

            _this14.filterOptions();

            _this14.arrowKeySelection(e);
          }, false);
          this.dom.input.addEventListener('mousemove', function () {
            return _this14.menu.unHighlightAll();
          }, false);
          break;
      }

      this.ifClickedOutside(function () {
        return _this14.menu.hide();
      }, 'add');
    }
  }, {
    key: "setDisabled",
    value: function setDisabled() {
      if (this.dom.button) this.dom.button.setAttribute('disabled', 'disabled');
      if (this.dom.input) this.dom.input.setAttribute('disabled', 'disabled');
    }
  }, {
    key: "arrowKeySelection",
    value: function arrowKeySelection(e) {
      /*
       * set the correct highlightIndex depending on the key pressed
       * TODO: Update this to not use keyCode as it's depricated
       */
      switch ("".concat(e.keyCode)) {
        // arrowDown
        case '40':
          this.highlightIndex += 1;
          break;
        // arrowUp

        case '38':
          this.highlightIndex -= 1;
          break;
        // enter

        case '13':
          this.setInputValue(this.menu.getHighlightedItem());
          this.menu.hide();
          break;
      }

      if (this.highlightIndex < 0) this.highlightIndex = 0;
      this.menu.unHighlightAll();
      var itemList = this.filterOptions();
      var maxNumItems = Math.min(itemList.length, this.menu.max);

      if (maxNumItems > 0) {
        this.highlightIndex = this.highlightIndex % maxNumItems; // TODO: this seems to be incorrect

        Menu.highlightItem(itemList[this.highlightIndex]);
      }
    }
  }, {
    key: "filterOptions",
    value: function filterOptions() {
      var items = Array.from(this.dom.menu.querySelectorAll('.item'));
      var typedValue = this.dom.input.value.toLowerCase();
      var filteredResults = items.filter(function (val) {
        return val.innerText.toLowerCase().indexOf(typedValue) > -1;
      });
      this.menu.showList(filteredResults);
      return filteredResults;
    }
  }, {
    key: "setInputValue",
    value: function setInputValue(target) {
      // skip the div with empty class when adding to input
      if (!target.classList.contains('empty')) this.dom.input.value = target.innerText;
    }
    /**
     * Assign value to input hidden, change innerHTML with selected option
     */

  }, {
    key: "selectSingleOption",
    value: function selectSingleOption(event) {
      var id = event.target.id;
      var label = this.dom.dropdown.querySelector("label[for=\"".concat(id, "\"]"));
      this.dom.button.innerText = label.innerText;
    }
    /**
     * Set correct dropdown label: data-select-label + (numChecked)
     */

  }, {
    key: "selectMultipleOptions",
    value: function selectMultipleOptions() {
      var nChecked = this.dom.dropdown.querySelectorAll('input[type="checkbox"]:checked').length;
      var innerlabel = this.dom.button.getAttribute('data-innerlabel');

      if (nChecked > 0) {
        this.dom.button.innerHTML = "".concat(innerlabel, " (").concat(nChecked, ")");
      } else {
        this.dom.button.innerHTML = this.initialLabel;
      }
    }
    /**
     * Executes callback function when clicked outside the target event
     */

  }, {
    key: "ifClickedOutside",
    value: function ifClickedOutside(callback, type) {
      var _this15 = this;

      if (type === 'remove') {
        document.removeEventListener('click', function (_ref) {
          var target = _ref.target;

          if (!_this15.dom.dropdown.contains(target)) {
            callback.bind(_this15)();
          }
        });
      } else {
        document.addEventListener('click', function (_ref2) {
          var target = _ref2.target;

          if (!_this15.dom.dropdown.contains(target)) {
            callback.bind(_this15)();
          }
        });
      }
    }
  }]);

  return Dropdown;
}();

var Gauge =
/*#__PURE__*/
function () {
  function Gauge(element) {
    _classCallCheck(this, Gauge);

    this.dom = {
      gauge: element,
      id: element.getAttribute('id'),
      settings: element.dataset.settings,
      valueArc: undefined,
      valueLabel: undefined
    };
    this.data = null;
  }

  _createClass(Gauge, [{
    key: "setCanvas",
    value: function setCanvas(selector, scale) {
      return d3.select(selector).append('svg').attr('width', 250 * scale).attr('height', 250 * scale).append('g').attr('transform', 'translate(' + 125 * scale + ', ' + 125 * scale + ')');
    }
  }, {
    key: "injectTexture",
    value: function injectTexture() {
      var dTexture = window.document.querySelector('#diagonalTexture');

      if (dTexture === undefined) {
        d3.select('body').append('svg').append('defs').append('pattern').attr('id', 'diagonalTexture').attr('width', 5).attr('height', 5).attr('patternUnits', 'userSpaceOnUse').append('path').attr('fill', 'white').attr('stroke', '#767676').attr('stroke-width', '1').attr('d', 'M0 5L5 0ZM6 4L4 6ZM-1 1L1 -1Z');
      }
    }
  }, {
    key: "getScale",
    value: function getScale(size) {
      switch (size) {
        case 'small':
          return .5;

        case 'medium':
          return .75;

        case 'large':
          return 1;

        default:
          return .75;
      }
    }
  }, {
    key: "createArc",
    value: function createArc(options) {
      var s = options.scale || .75;
      return d3.arc().innerRadius(options.radius.inner * s).outerRadius(options.radius.outer * s).startAngle(options.angle.start * (Math.PI / 180)).endAngle(options.angle.end * (Math.PI / 180));
    }
  }, {
    key: "drawArc",
    value: function drawArc(canvas, options) {
      var createArc = this.createArc;
      return canvas.append('path').attr('class', options.props.class || 'arc').attr('d', createArc(options.arc)).attr('fill', options.props.color).attr('opacity', options.props.opacity || 1);
    }
  }, {
    key: "drawLabel",
    value: function drawLabel(canvas, options) {
      return canvas.append('g').attr('transform', 'translate(' + (options.x * options.scale || 0) + ',' + (options.y * options.scale || 0) + ')').append('text').text(options.message).style('font-size', options.fontSize * options.scale + 'px').attr('class', options.class || 'text');
    }
  }, {
    key: "init",
    value: function init() {
      this.data = this.parseData();
      this.setDataDefaults();
      this.drawChart();
      this.injectTexture(); // this.setRandomData();
    }
  }, {
    key: "parseData",
    value: function parseData() {
      return JSON.parse(this.dom.settings);
    }
  }, {
    key: "setDataDefaults",
    value: function setDataDefaults() {
      this.data.value = this.data.value || 0;
      this.data.min = this.data.min || 0;
      this.data.max = this.data.max || 100;
      this.data.units = this.data.units || '%';
      this.data.scale = this.getScale(this.data.size) || .75;
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      var _parentThis = this;

      var valueArc = this.dom.valueArc;
      var prevAngle = this.val2angle(this.data.value);
      var newAngle = this.val2angle(value);
      valueArc.transition().duration(750).attrTween('d', this.arcTween(newAngle, prevAngle, _parentThis));
      this.data.value = this.angle2value(newAngle);
    }
  }, {
    key: "setRandomData",
    value: function setRandomData() {
      var _parentThis = this;

      d3.interval(function () {
        var randomAngle = Math.random() * 270 - 135;

        var randomValue = _parentThis.angle2value(randomAngle, _parentThis);

        _parentThis.setValue(randomValue);
      }, 1500);
    }
  }, {
    key: "val2angle",
    value: function val2angle(value) {
      var scale = d3.scaleLinear().domain([this.data.min, this.data.max]).range([-135, 135]);
      return scale(value);
    }
  }, {
    key: "angle2value",
    value: function angle2value(angle, _parentThis) {
      var _this = _parentThis !== undefined ? _parentThis : this;

      var scale = d3.scaleLinear().domain([-135, 135]).range([_this.data.min, _this.data.max]);
      return scale(angle);
    }
  }, {
    key: "setLabelAngle",
    value: function setLabelAngle(angle, _parentThis) {
      var valueLabel = _parentThis.dom.valueLabel;

      var decimals = _parentThis.parseData().decimals;

      valueLabel.text(function () {
        return _parentThis.angle2value(angle, _parentThis).toFixed(decimals);
      });
    }
  }, {
    key: "arcTween",
    value: function arcTween(newAngle, oldAngle, _parentThis) {
      var _this16 = this;

      var setArcColor = _parentThis.setArcColor,
          setLabelAngle = _parentThis.setLabelAngle,
          angle2value = _parentThis.angle2value,
          data = _parentThis.data;
      return function () {
        var interpolate = d3.interpolate(oldAngle, newAngle);
        return function (t) {
          oldAngle = interpolate(t);

          var arc = _this16.createArc({
            angle: {
              start: -135,
              end: oldAngle
            },
            radius: {
              inner: 95,
              outer: 102
            },
            scale: data.scale
          });

          setLabelAngle(oldAngle, _parentThis);
          var decimals = data.decimals || 0;
          var val = angle2value(oldAngle, _parentThis);
          setArcColor(parseFloat(val).toFixed(decimals), data.limits, _parentThis);
          return arc(t);
        };
      };
    }
  }, {
    key: "setArcColor",
    value: function setArcColor(value, limits, _parentThis) {
      var d = _parentThis !== undefined ? _parentThis.dom : this.dom;
      d.valueArc.attr('class', 'valueArc');

      if (limits) {
        Array.from(limits).forEach(function (limit) {
          if (value >= limit.from && value <= limit.to) {
            if (limit.color !== 'transparent' && limit.color !== 'unknown' && limit.color !== 'gray') {
              d.valueArc.attr('class', limit.color);
            }
          }
        });
      }
    }
  }, {
    key: "drawChart",
    value: function drawChart() {
      var _this17 = this;

      // variables
      var gScale = this.data.scale; //  set canvas

      var svg = this.setCanvas('#' + this.dom.id, gScale); // foreground arc

      this.drawArc(svg, {
        arc: {
          radius: {
            inner: 95,
            outer: 102
          },
          angle: {
            start: -135,
            end: 135
          },
          scale: gScale
        },
        props: {
          class: 'foregroundArc'
        }
      }); // value arc

      this.dom.valueArc = this.drawArc(svg, {
        arc: {
          radius: {
            inner: 95,
            outer: 102
          },
          angle: {
            start: -135,
            end: this.val2angle(this.data.value)
          },
          scale: gScale
        },
        props: {
          class: 'valueArc'
        }
      }); // set value arc color

      this.setArcColor(this.data.value, this.data.limits); // negative arcs

      var frequency = 275 / 37;
      var length = 5;

      for (var i = -140; i < 135; i = i + frequency) {
        this.drawArc(svg, {
          arc: {
            radius: {
              inner: 94,
              outer: 103
            },
            angle: {
              start: i,
              end: i + length
            },
            scale: gScale
          },
          props: {
            class: 'negativeArc'
          }
        });
      } // draw limits


      if (this.data.limits) {
        Array.from(this.data.limits).forEach(function (limit) {
          var limitArc = _this17.drawArc(svg, {
            arc: {
              radius: {
                inner: 82,
                outer: 87
              },
              angle: {
                start: _this17.val2angle(limit.from) + 1,
                end: _this17.val2angle(limit.to) - 1
              },
              scale: gScale
            },
            props: {
              class: limit.color,
              opacity: 0.3
            }
          }); // limit hover arc


          var limitHoverArc = _this17.drawArc(svg, {
            arc: {
              radius: {
                inner: 72,
                outer: 117
              },
              angle: {
                start: _this17.val2angle(limit.from) + 1,
                end: _this17.val2angle(limit.to) - 1
              },
              scale: gScale
            },
            props: {
              class: 'transparent'
            }
          }); // tooltip


          var tooltip = d3.select('#' + _this17.dom.id).append('div').attr('class', 'tooltip hidden').style('left', '0px').style('top', '0px').html(limit.label); // animation

          limitHoverArc.on('mouseenter', function () {
            tooltip.node().classList.remove('hidden');
            limitArc.style('opacity', 1);
          });
          limitHoverArc.on('mousemove', function () {
            tooltip.style('left', d3.event.clientX + 'px').style('top', d3.event.clientY - 40 + 'px');
          });
          limitHoverArc.on('mouseleave', function () {
            tooltip.node().classList.add('hidden');
            limitArc.style('opacity', 0.3);
          });
        });
      } // labels


      this.drawLabel(svg, {
        message: this.data.units,
        class: 'units',
        x: 0,
        y: 40,
        fontSize: 28,
        scale: gScale
      });
      this.drawLabel(svg, {
        message: this.data.min,
        class: 'label left',
        x: -65,
        y: 110,
        fontSize: 24,
        scale: gScale
      });
      this.drawLabel(svg, {
        message: this.data.max,
        class: 'label right',
        x: 65,
        y: 110,
        fontSize: 24,
        scale: gScale
      });
      this.dom.valueLabel = this.drawLabel(svg, {
        message: this.data.value,
        class: 'total',
        fontSize: 60,
        scale: gScale
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {}
  }]);

  return Gauge;
}();

var App =
/*#__PURE__*/
function () {
  function App(element) {
    var _this18 = this;

    _classCallCheck(this, App);

    this.dom = {
      app: element,
      appbar: element.querySelector('.appbar'),
      appnav: element.querySelector('.appnav')
    };
    this.appbar = new Appbar(this.dom.appbar);
    this.appnav = new Appnav(this.dom.appnav);
    this.listeners = {
      toggle: function toggle() {
        return _this18.toggle();
      }
    };
  }

  _createClass(App, [{
    key: "init",
    value: function init() {
      this.appbar.init();
      this.appnav.init();
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
      this.appbar.destroy();
      this.appnav.destroy();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      window.addEventListener('SyspanelOpenEvent', this.listeners.toggle, false);
      window.addEventListener('SyspanelCloseEvent', this.listeners.toggle, false);
    }
  }, {
    key: "removeEventListerners",
    value: function removeEventListerners() {
      window.removeEventListener('SyspanelOpenEvent', this.listeners.toggle, false);
      window.removeEventListener('SyspanelCloseEvent', this.listeners.toggle, false);
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (this.dom.app.classList.contains('slide-left')) {
        this.slideRight();
      } else {
        this.slideLeft();
      }
    }
  }, {
    key: "slideLeft",
    value: function slideLeft() {
      this.dom.app.classList.add('slide-left');
      this.dom.app.classList.remove('slide-right');
    }
  }, {
    key: "slideRight",
    value: function slideRight() {
      this.dom.app.classList.add('slide-right');
      this.dom.app.classList.remove('slide-left');
    }
  }]);

  return App;
}();

var Syspanel =
/*#__PURE__*/
function () {
  function Syspanel(element) {
    var _this19 = this;

    _classCallCheck(this, Syspanel);

    this.dom = {
      syspanel: element,
      syspanelCloseIcons: element.querySelectorAll('.syspanel-close'),
      items: element.children
    };
    this.listeners = {
      toggleSyspanel: function toggleSyspanel(e) {
        return _this19.toggle(e);
      },
      pageClick: function pageClick(e) {
        return _this19.pageClickHandler(e);
      },
      closeIconClickHandler: function closeIconClickHandler() {
        return _this19.close();
      }
    };
    this.events = {
      SyspanelOpenEvent: new CustomEvent('SyspanelOpenEvent'),
      SyspanelCloseEvent: new CustomEvent('SyspanelCloseEvent'),
      SyspanelTabEvent: new CustomEvent('SyspanelTabEvent')
    };
  }

  _createClass(Syspanel, [{
    key: "init",
    value: function init() {
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListerners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this20 = this;

      window.addEventListener('toggleSyspanel', this.listeners.toggleSyspanel, false);
      Array.from(this.dom.syspanelCloseIcons).forEach(function (icon) {
        icon.addEventListener('click', _this20.listeners.closeIconClickHandler, false);
      });
    }
  }, {
    key: "removeEventListerners",
    value: function removeEventListerners() {
      var _this21 = this;

      window.removeEventListener('toggleSyspanel', this.listeners.toggleSyspanel, false);
      Array.from(this.dom.syspanelCloseIcons).forEach(function (icon) {
        icon.removeEventListener('click', _this21.listeners.closeIconClickHandler, false);
      });
    }
  }, {
    key: "toggle",
    value: function toggle(e) {
      var panel = e.detail;

      if (this.isHidden(this.dom.syspanel)) {
        this.show(panel);
        this.hideAllExcept(panel);
        this.open();
      } else {
        if (this.isHidden(panel)) {
          this.show(panel);
          this.hideAllExcept(panel);
          this.tabEvent();
        } else {
          this.close();
        }
      }
    }
  }, {
    key: "open",
    value: function open() {
      this.show(this.dom.syspanel);
      this.openEvent();
    }
  }, {
    key: "close",
    value: function close() {
      this.hide(this.dom.syspanel);
      this.closeEvent();
    }
  }, {
    key: "isHidden",
    value: function isHidden(element) {
      return element.classList.contains('hidden');
    }
  }, {
    key: "hide",
    value: function hide(element) {
      element.classList.add('hidden');
    }
  }, {
    key: "show",
    value: function show(element) {
      element.classList.remove('hidden');
    }
  }, {
    key: "hideAllExcept",
    value: function hideAllExcept(element) {
      var _this22 = this;

      Array.from(this.dom.items).forEach(function (item) {
        if (item !== element) {
          _this22.hide(item);
        }
      });
    }
  }, {
    key: "openEvent",
    value: function openEvent() {
      window.addEventListener('click', this.listeners.pageClick, true);
      window.dispatchEvent(this.events.SyspanelOpenEvent);
    }
  }, {
    key: "closeEvent",
    value: function closeEvent() {
      window.removeEventListener('click', this.listeners.pageClick, true);
      window.dispatchEvent(this.events.SyspanelCloseEvent);
    }
  }, {
    key: "tabEvent",
    value: function tabEvent() {
      window.dispatchEvent(this.events.SyspanelTabEvent);
    }
  }, {
    key: "pageClickHandler",
    value: function pageClickHandler(e) {
      if (!document.querySelector('.sysbar').contains(e.target) && !this.dom.syspanel.contains(e.target)) {
        this.close();
      }
    }
  }]);

  return Syspanel;
}();

var Sysbar =
/*#__PURE__*/
function () {
  function Sysbar(element) {
    var _this23 = this;

    _classCallCheck(this, Sysbar);

    this.dom = {
      sysbar: element,
      items: element.querySelectorAll('.item')
    };
    this.listeners = {
      click: function click() {
        return _this23.toggleSyspanel();
      }
    };
    this.events = {
      toggleSyspanel: new CustomEvent('toggleSyspanel', {
        detail: document.querySelector('.settings')
      })
    };
  }

  _createClass(Sysbar, [{
    key: "init",
    value: function init() {
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this24 = this;

      Array.from(this.dom.items).forEach(function (item) {
        if (item.classList.contains('settings-trigger')) {
          item.addEventListener('click', _this24.listeners.click, false);
        }
      });
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this25 = this;

      Array.from(this.dom.items).forEach(function (item) {
        if (item.classList.contains('settings-trigger')) {
          item.removeEventListener('click', _this25.listeners.click, false);
        }
      });
    }
  }, {
    key: "toggleSyspanel",
    value: function toggleSyspanel() {
      window.dispatchEvent(this.events.toggleSyspanel);
    }
  }]);

  return Sysbar;
}();

var Layout =
/*#__PURE__*/
function () {
  function Layout(element) {
    var _this26 = this;

    _classCallCheck(this, Layout);

    this.dom = {
      body: element,
      app: element.querySelector('.app'),
      syspanel: element.querySelector('.syspanel'),
      sysbar: element.querySelector('.sysbar')
    };
    this.app = new App(this.dom.app);
    this.syspanel = new Syspanel(this.dom.syspanel);
    this.sysbar = new Sysbar(this.dom.sysbar);
    this.listeners = {
      resize: function resize() {
        return _this26.contentBehaviour();
      }
    };
    this.events = {
      showNavigation: new CustomEvent('showNavigation'),
      hideNavigation: new CustomEvent('hideNavigation'),
      toggleNavigation: new CustomEvent('toggleNavigation')
    };
  }

  _createClass(Layout, [{
    key: "init",
    value: function init() {
      this.app.init();
      this.syspanel.init();
      this.sysbar.init();
      this.addEventListeners();
      this.contentBehaviour();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
      this.app.destroy();
      this.syspanel.destroy();
      this.sysbar.destroy();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      window.addEventListener('resize', this.listeners.resize, false);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      window.removeEventListener('resize', this.listeners.resize, false);
    }
  }, {
    key: "contentBehaviour",
    value: function contentBehaviour() {
      var viewport = {
        sm: 480,
        md: 768,
        lg: 1024
      };
      var w = window.outerWidth;

      if (w <= viewport.sm) {
        document.dispatchEvent(this.events.hideNavigation);
      } else if (w <= viewport.md) {
        document.dispatchEvent(this.events.hideNavigation);
      } else if (w <= viewport.lg) {
        document.dispatchEvent(this.events.showNavigation);
      } else {
        document.dispatchEvent(this.events.showNavigation);
      }
    }
  }]);

  return Layout;
}(); // eslint-disable-next-line max-len


mapboxgl.accessToken = 'pk.eyJ1IjoiZGFuaWVsLWVyaWNzc29uIiwiYSI6ImNqZnh3cng0NTEzZTcyd2tkYWJhOGN3czIifQ.Nyg8nQf7s8nqW81xcL2hwg';
var geoJSONLines = {
  type: 'FeatureCollection',
  features: [{
    type: 'Feature',
    geometry: {
      type: 'LineString',
      coordinates: [[17.97024, 59.33568], [17.97719, 59.32736]]
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'LineString',
      coordinates: [[17.97024, 59.33568], [17.98088, 59.33244]]
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'LineString',
      coordinates: [[17.97024, 59.33568], [17.97410, 59.33940]]
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'LineString',
      coordinates: [[18.05300, 59.33165], [18.08208, 59.33631]]
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'LineString',
      coordinates: [[18.03590, 59.33412], [18.05300, 59.33165]]
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'LineString',
      coordinates: [[18.03590, 59.33412], [18.01344, 59.33604]]
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'LineString',
      coordinates: [[18.03590, 59.33412], [18.03021, 59.33745]]
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'LineString',
      coordinates: [[18.03590, 59.33412], [18.02760, 59.33000]]
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'LineString',
      coordinates: [[18.06384, 59.32605], [18.05300, 59.33165]]
    }
  }]
};
var geoJSON = {
  type: 'FeatureCollection',
  features: [{
    type: 'Feature',
    geometry: {
      type: 'nodeBig',
      coordinates: [18.03590, 59.33412]
    },
    properties: {
      title: 'VDC 01',
      description: 'Node 1'
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'node-warning',
      coordinates: [18.08208, 59.33631]
    },
    properties: {
      title: 'VDC 05',
      description: 'Node 2'
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'node',
      coordinates: [18.06384, 59.32605]
    },
    properties: {
      title: 'VDC 03',
      description: 'Node 2'
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'server',
      coordinates: [18.05300, 59.33165]
    },
    properties: {
      title: 'VDC 04',
      description: 'Node 2'
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'node',
      coordinates: [18.03021, 59.33745]
    },
    properties: {
      title: 'VDC 02',
      description: 'Node 2'
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'node',
      coordinates: [18.01344, 59.33604]
    },
    properties: {
      title: 'VDC 06',
      description: 'Node 2'
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'node-warning',
      coordinates: [18.02760, 59.33000]
    },
    properties: {
      title: 'VDC 07',
      description: 'Node 2'
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'nodeBig',
      coordinates: [17.97024, 59.33568]
    },
    properties: {
      title: 'VDC 08',
      description: 'Node 2'
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'node',
      coordinates: [17.98088, 59.33244]
    },
    properties: {
      title: 'VDC 09',
      description: 'Node 2'
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'node',
      coordinates: [17.97719, 59.32736]
    },
    properties: {
      title: 'VDC 10',
      description: 'Node 2'
    }
  }, {
    type: 'Feature',
    geometry: {
      type: 'node',
      coordinates: [17.97410, 59.33940]
    },
    properties: {
      title: 'VDC 11',
      description: 'Node 2'
    }
  }]
};

var Map =
/*#__PURE__*/
function () {
  function Map() {
    _classCallCheck(this, Map);

    this.mapCenter = [18.03590, 59.33412];
    /*
     * dark: 'daniel-ericsson/cjhknw7b62bai2srw84r730uw',
     * light: 'daniel-ericsson/cjhknwseq0dk22rnzpgqciiah',
     */

    this.themes = {
      dark: 'mapbox/dark-v9',
      light: 'daniel-ericsson/cjhknwseq0dk22rnzpgqciiah'
    };
    this.lineColors = {
      dark: '#F2F2F2',
      light: '#242424'
    };
    this.loadedTheme = document.querySelector('body').classList;
    this.map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/' + this.themes[this.loadedTheme],
      center: [18.03590, 59.33412],
      zoom: 12
    });
    this.lines = {
      id: 'routes',
      type: 'line',
      source: {
        type: 'geojson',
        data: geoJSONLines
      },
      layout: {
        'line-join': 'round',
        'line-cap': 'round'
      },
      paint: {
        'line-color': '#333',
        'line-width': 2,
        'line-dasharray': [1, 2],
        'line-opacity': 1
      }
    };
  }

  _createClass(Map, [{
    key: "init",
    value: function init() {
      var _this27 = this;

      // Add zoom and rotation controls to the map.
      this.map.addControl(new mapboxgl.NavigationControl());
      /*
       * const mapBoundaries = {
       *   topLeft: [17.92821, 59.34554],
       *   bottomRight: [18.09953, 59.31703],
       * };
       */
      // add markers to map

      Array.from(geoJSON.features).forEach(function (marker) {
        // create a HTML element for each feature
        var el = document.createElement('div');

        if (marker.geometry.type !== undefined) {
          el.className = marker.geometry.type.toString();
        } else {
          el.className = 'node';
        } // make a marker for each feature and add to the map


        new mapboxgl.Marker(el).setLngLat(marker.geometry.coordinates).addTo(_this27.map);
        new mapboxgl.Marker(el).setLngLat(marker.geometry.coordinates).setPopup(new mapboxgl.Popup({
          offset: 25
        }).setHTML("<span class=\"map-popup-header\">".concat(marker.properties.title, "</span>"))).addTo(_this27.map);
      });
      this.map.on('load', function () {
        _this27.map.addLayer(_this27.lines);
      });
      this.addEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this28 = this;

      document.addEventListener('maximizeTile', function () {
        setTimeout(function () {
          _this28.map.resize();

          _this28.map.flyTo({
            center: _this28.mapCenter
          });
        }, 600);
      }, false);
      document.addEventListener('minimizeTile', function () {
        setTimeout(function () {
          _this28.map.resize();

          _this28.map.flyTo({
            center: _this28.mapCenter
          });
        }, 600);
      }, false);
      document.addEventListener('toggleNavigation', function () {
        setTimeout(function () {
          _this28.map.resize();

          _this28.map.flyTo({
            center: _this28.mapCenter
          });
        }, 600);
      }, false);
      document.addEventListener('switchTheme', function (event) {
        _this28.loadedTheme = event.detail.theme;

        _this28.map.setStyle('mapbox://styles/' + _this28.themes[_this28.loadedTheme]);

        _this28.map.on('style.load', function () {
          _this28.lines.paint['line-color'] = _this28.lineColors[_this28.loadedTheme];

          if (!_this28.map.getLayer(_this28.lines.id)) {
            _this28.map.addLayer(_this28.lines);
          } else {
            _this28.map.setPaintProperty(_this28.lines.id, 'line-color', _this28.lineColors[_this28.loadedTheme]);
          }
        });
      }, false);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this29 = this;

      document.removeEventListener('maximizeTile', function () {
        setTimeout(function () {
          _this29.map.resize();

          _this29.map.flyTo({
            center: _this29.mapCenter
          });
        }, 600);
      }, false);
      document.removeEventListener('minimizeTile', function () {
        setTimeout(function () {
          _this29.map.resize();

          _this29.map.flyTo({
            center: _this29.mapCenter
          });
        }, 600);
      }, false);
      document.removeEventListener('toggleNavigation', function () {
        setTimeout(function () {
          _this29.map.resize();

          _this29.map.flyTo({
            center: _this29.mapCenter
          });
        }, 600);
      }, false);
      document.removeEventListener('switchTheme', function (event) {
        _this29.loadedTheme = event.detail.theme;

        _this29.map.setStyle('mapbox://styles/' + _this29.themes[_this29.loadedTheme]);

        _this29.map.on('style.load', function () {
          _this29.lines.paint['line-color'] = _this29.lineColors[_this29.loadedTheme];

          if (!_this29.map.getLayer(_this29.lines.id)) {
            _this29.map.addLayer(_this29.lines);
          } else {
            _this29.map.setPaintProperty(_this29.lines.id, 'line-color', _this29.lineColors[_this29.loadedTheme]);
          }
        });
      }, false);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }]);

  return Map;
}();

var MultiPanelTile =
/*#__PURE__*/
function () {
  function MultiPanelTile(element) {
    var _this30 = this;

    _classCallCheck(this, MultiPanelTile);

    this.dom = {
      multiPanelTile: element,
      leftPanel: element.querySelector('.left-panel'),
      midPanel: element.querySelector('.mid-panel'),
      rightPanel: element.querySelector('.right-panel'),
      leftPanelTriggers: element.querySelectorAll('.left-panel-trigger'),
      rightPanelTriggers: element.querySelectorAll('.right-panel-trigger')
    };
    this.listeners = {
      toggleLeftPanel: function toggleLeftPanel() {
        _this30.togglePanel(_this30.dom.leftPanel);

        _this30.updatePanelBehavior();
      },
      toggleRightPanel: function toggleRightPanel() {
        _this30.togglePanel(_this30.dom.rightPanel);

        _this30.updatePanelBehavior();
      }
    };
    this.flags = {
      panelLeft: false,
      panelRight: false
    };
  }

  _createClass(MultiPanelTile, [{
    key: "init",
    value: function init() {
      this.addEventListeners();
      this.updatePanelBehavior();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this31 = this;

      Array.from(this.dom.leftPanelTriggers).forEach(function (trigger) {
        trigger.addEventListener('click', _this31.listeners.toggleLeftPanel, false);
      });
      Array.from(this.dom.rightPanelTriggers).forEach(function (trigger) {
        trigger.addEventListener('click', _this31.listeners.toggleRightPanel, false);
      });
      window.addEventListener('resize', function () {
        return _this31.updatePanelBehavior();
      }, false);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this32 = this;

      Array.from(this.dom.leftPanelTriggers).forEach(function (trigger) {
        trigger.removeEventListener('click', _this32.listeners.toggleLeftPanel, false);
      });
      Array.from(this.dom.rightPanelTriggers).forEach(function (trigger) {
        trigger.removeEventListener('click', _this32.listeners.toggleRightPanel, false);
      });
      window.removeEventListener('resize', function () {
        return _this32.updatePanelBehavior();
      }, false);
    }
  }, {
    key: "togglePanel",
    value: function togglePanel(panel) {
      if (!this.isPanelClosed(panel)) {
        this.hidePanel(panel);
      } else {
        this.showPanel(panel);
      }
    }
  }, {
    key: "isPanelClosed",
    value: function isPanelClosed(panel) {
      return panel.classList.contains('hidden');
    }
  }, {
    key: "hidePanel",
    value: function hidePanel(panel) {
      panel.classList.add('hidden');
    }
  }, {
    key: "showPanel",
    value: function showPanel(panel) {
      if (panel.classList.contains('left-panel')) {
        this.flags.panelLeft = true;
      }

      if (panel.classList.contains('right-panel')) {
        this.flags.panelRight = true;
      }

      panel.classList.remove('hidden');
    }
  }, {
    key: "updatePanelBehavior",
    value: function updatePanelBehavior() {
      var leftPanel = this.dom.leftPanel;
      var midPanel = this.dom.midPanel;
      var rightPanel = this.dom.rightPanel;
      var pageWidth = document.body.offsetWidth; // mobile, tablet

      if (pageWidth < 769) {
        if (!this.isPanelClosed(leftPanel) && !this.isPanelClosed(rightPanel)) {
          this.hidePanel(leftPanel);
          this.hidePanel(midPanel);
        }

        if (this.isPanelClosed(leftPanel) && this.isPanelClosed(rightPanel)) {
          this.showPanel(midPanel);
        }

        if (!this.isPanelClosed(leftPanel) && this.isPanelClosed(rightPanel)) {
          this.hidePanel(midPanel);
          this.showPanel(leftPanel);
        }

        if (this.isPanelClosed(leftPanel) && !this.isPanelClosed(rightPanel)) {
          this.hidePanel(midPanel);
          this.showPanel(rightPanel);
        } // desktop, larger screen

      } else if (pageWidth < 1201) {
        this.showPanel(midPanel);

        if (!this.isPanelClosed(leftPanel) && !this.isPanelClosed(rightPanel)) {
          if (this.flags.panelLeft) {
            this.hidePanel(rightPanel);
          } else {
            this.hidePanel(leftPanel);
          }

          if (this.flags.panelRight) {
            this.hidePanel(leftPanel);
            this.showPanel(rightPanel);
          }
        }
      } else {
        this.showPanel(midPanel);
      }

      this.flags.panelLeft = false;
      this.flags.panelRight = false;
    }
  }]);

  return MultiPanelTile;
}();

var Notification =
/*#__PURE__*/
function () {
  function Notification(props) {
    _classCallCheck(this, Notification);

    this.dom = {
      notification: null,
      close: null
    };
    this.props = props || {
      title: 'No notification title',
      description: 'You are missing adding the description also'
    };
  }

  _createClass(Notification, [{
    key: "init",
    value: function init() {
      this.createNotification();
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this33 = this;

      if (this.dom.notification && this.dom.notification.parentNode) {
        this.dom.notification.removeEventListener('click', function (e) {
          return _this33.handleClick(e);
        }, false);
        this.dom.notification.parentNode.removeChild(this.dom.notification);
      }
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this34 = this;

      this.dom.notification.addEventListener('click', function (e) {
        return _this34.handleClick(e);
      }, false);
    }
  }, {
    key: "getNotification",
    value: function getNotification() {
      return this.dom.notification;
    }
  }, {
    key: "createNotification",
    value: function createNotification() {
      var _this35 = this;

      this.dom.notification = document.createElement('div');
      this.dom.notification.classList.add('notification');
      var notificationTopRow = document.createElement('div');
      notificationTopRow.classList.add('top-row');
      var notificationTitle = document.createElement('div');
      notificationTitle.classList.add('title');
      notificationTitle.innerText = this.props.title;
      notificationTopRow.appendChild(notificationTitle);
      var notificationClose = document.createElement('i');
      notificationClose.className = 'icon icon-cross close';
      notificationTopRow.appendChild(notificationClose);
      var notificationDescription = document.createElement('div');
      notificationDescription.classList.add('description');
      notificationDescription.innerText = this.props.description;
      this.dom.notification.appendChild(notificationTopRow);
      this.dom.notification.appendChild(notificationDescription);
      this.dom.close = notificationClose;
      document.body.appendChild(this.dom.notification);
      /**
       * setTimeout is needed for CSS animation to work when creating new elements
       * (10ms for Firefox animation to work properly)
       */

      setTimeout(function () {
        _this35.dom.notification.classList.add('live');
      }, 10);

      if (this.props.timeout) {
        setTimeout(function () {
          _this35.destroy();
        }, this.props.timeout);
      }
    }
  }, {
    key: "handleClick",
    value: function handleClick(e) {
      if (e.target !== this.dom.close && this.props.action) {
        this.props.action();
      }

      this.destroy();
    }
  }]);

  return Notification;
}();

var NotificationLog = {
  init: function init() {
    var _this36 = this;

    this.dom = {
      notificationLog: document.querySelector('.notification-log'),
      notificationLogContainer: document.querySelector('.notification-log-container'),
      notificationLogTrigger: document.querySelector('.notification-log-trigger'),
      notificationLogNumber: document.querySelector('.notification-log-number'),
      notificationLogEmpty: document.querySelector('.notification-log-empty')
    };
    this.state = {
      isNew: 0,
      seen: false,
      notificationsDOM: [],
      liveNotification: null
    };
    this.listeners = {
      clickTrigger: function clickTrigger() {
        return _this36.clickTrigger();
      },
      SyspanelOpenEvent: function SyspanelOpenEvent() {
        return _this36.removeLiveNotification();
      },
      SyspanelTabEvent: function SyspanelTabEvent(e) {
        return _this36.clearAllNotifications(e);
      },
      SyspanelCloseEvent: function SyspanelCloseEvent(e) {
        return _this36.clearAllNotifications(e);
      }
    };
    this.hasActiveListeners = [];
    this.events = {
      toggleSyspanel: new CustomEvent('toggleSyspanel', {
        detail: this.dom.notificationLog
      }),
      NotificationLogCounterUpdate: new CustomEvent('NotificationLogCounterUpdate')
    };
    this.notificationTimeout = 10000;
    this.addEventListeners();
  },
  destroy: function destroy() {
    this.removeEventListeners();
  },
  removeEventListeners: function removeEventListeners() {
    this.dom.notificationLogTrigger.removeEventListener('click', this.listeners.clickTrigger, false);
    window.removeEventListener('SyspanelOpenEvent', this.listeners.SyspanelOpenEvent, false);
    window.removeEventListener('SyspanelTabEvent', this.listeners.SyspanelTabEvent, false);
    window.removeEventListener('SyspanelCloseEvent', this.listeners.SyspanelCloseEvent, false);
    this.hasActiveListeners.forEach(function (element) {
      element.removeAllListeners();
    });
  },
  addEventListeners: function addEventListeners() {
    this.dom.notificationLogTrigger.addEventListener('click', this.listeners.clickTrigger, false);
    window.addEventListener('SyspanelOpenEvent', this.listeners.SyspanelOpenEvent, false);
    window.addEventListener('SyspanelTabEvent', this.listeners.SyspanelTabEvent, false);
    window.addEventListener('SyspanelCloseEvent', this.listeners.SyspanelCloseEvent, false);
  },
  setNotification: function setNotification(notification) {
    notification.isNew = true;
    this.state.isNew += 1;
    this.showLiveNotification(notification);
    this.prependToLog(notification);
    this.updateCounter();
    this.removeEmptyMessage();
    /*
     * TODO: How to serve, place, handle audio files...
     * const audio = new Audio('public/vanilla-components/notification-log/notification.mp3');
     * audio.play();
     */
  },
  loadNotificationLog: function loadNotificationLog(notifications) {
    var _this37 = this;

    notifications.forEach(function (notification) {
      if (notification.isNew) {
        _this37.state.isNew += 1;

        _this37.showLiveNotification(notification);
      }

      _this37.prependToLog(notification);
    });
    this.updateCounter();
    this.removeEmptyMessage();
  },
  setNotificationTimeout: function setNotificationTimeout(ms) {
    this.notificationTimeout = ms;
  },
  showLiveNotification: function showLiveNotification(notification) {
    var _this38 = this;

    this.removeLiveNotification();
    var newNotification = new Notification({
      title: notification.title,
      description: notification.description,
      action: notification.action,
      timeout: this.notificationTimeout
    });
    newNotification.init();
    this.state.liveNotification = newNotification;
    newNotification.getNotification().addEventListener('click', function () {
      _this38.clearNotification();
    });
    this.hasActiveListeners.push(newNotification.getNotification());
  },
  removeLiveNotification: function removeLiveNotification() {
    if (this.state.liveNotification) {
      this.state.liveNotification.destroy();
    }
  },
  prependToLog: function prependToLog(notification) {
    var _this39 = this;

    var notificationLogItem = document.createElement('div');
    notificationLogItem.classList.add('notification-log-item');

    if (notification.isNew) {
      notificationLogItem.classList.add('new');
    }

    var titleElement = document.createElement('div');
    titleElement.classList.add('title');
    titleElement.innerText = notification.title;
    notificationLogItem.appendChild(titleElement);
    var descriptionElement = document.createElement('div');
    descriptionElement.classList.add('description');
    descriptionElement.innerText = notification.description;
    notificationLogItem.appendChild(descriptionElement);
    var timestampElement = document.createElement('span');
    timestampElement.classList.add('notification-log-item-time');
    timestampElement.innerText = this.getRelativeTime(notification.timestamp);
    notificationLogItem.appendChild(timestampElement);
    notificationLogItem.dataset.timestamp = notification.timestamp;
    this.state.notificationsDOM.push(notificationLogItem);
    var notificationContainer = document.querySelector('.notification-log-container');
    notificationContainer.insertBefore(notificationLogItem, notificationContainer.firstChild);

    if (notification.action) {
      notificationLogItem.addEventListener('click', function () {
        window.dispatchEvent(_this39.events.toggleSyspanel);
        setTimeout(function () {
          notification.action();
        }, 250);
      });
      this.hasActiveListeners.push(notificationLogItem);
    }
  },
  updateCounter: function updateCounter() {
    window.dispatchEvent(this.events.NotificationLogCounterUpdate);
    this.dom.notificationLogNumber.innerHTML = this.state.isNew;
    var hasNotification = 'has-notification';
    var noNotification = 'no-notification';

    if (this.state.isNew === 0) {
      if (this.dom.notificationLogTrigger.classList.contains(hasNotification)) {
        this.dom.notificationLogTrigger.classList.remove(hasNotification);
        this.dom.notificationLogTrigger.classList.add(noNotification);
      }
    } else {
      this.seen = false;
      this.dom.notificationLogTrigger.classList.remove(noNotification);
      this.dom.notificationLogTrigger.classList.add(hasNotification);
    }
  },
  markAsSeen: function markAsSeen(item) {
    item.classList.remove('new');
  },
  markAllAsSeen: function markAllAsSeen() {
    for (var i = 0; i < this.state.notificationsDOM.length; i += 1) {
      this.markAsSeen(this.state.notificationsDOM[i]);
    }

    this.state.notificationsDOM = [];
  },
  clickTrigger: function clickTrigger() {
    window.dispatchEvent(this.events.toggleSyspanel);
    this.seen = true;
    this.updateTimes();
  },
  clearNotification: function clearNotification() {
    this.state.isNew -= 1;
    this.updateCounter();
    this.markAsSeen(this.state.notificationsDOM[this.state.notificationsDOM.length - 1]);
  },
  clearAllNotifications: function clearAllNotifications() {
    if (this.seen) {
      this.state.isNew = 0;
      this.seen = false;
      this.updateCounter();
      this.markAllAsSeen();
    }
  },
  removeEmptyMessage: function removeEmptyMessage() {
    this.dom.notificationLogEmpty.classList.add('hidden');
  },
  // TODO: Talk about i18n and l10n, since right now time units are hardcoded...
  getRelativeTime: function getRelativeTime(timestamp) {
    var msPerMinute = 60 * 1000;
    var msPerHour = msPerMinute * 60;
    var msPerDay = msPerHour * 24;
    var msPerMonth = msPerDay * 30;
    var msPerYear = msPerDay * 365;
    var elapsed = new Date() - timestamp;

    if (elapsed < msPerMinute) {
      return '';
    } else if (elapsed < msPerHour) {
      return Math.round(elapsed / msPerMinute) + ' m';
    } else if (elapsed < msPerDay) {
      return Math.round(elapsed / msPerHour) + ' h';
    } else if (elapsed < msPerMonth) {
      return Math.round(elapsed / msPerDay) + ' d';
    } else if (elapsed < msPerYear) {
      return Math.round(elapsed / msPerMonth) + ' mo';
    } else {
      return Math.round(elapsed / msPerYear) + ' y';
    }
  },
  updateTimes: function updateTimes() {
    for (var i = 0; i < this.state.notificationsDOM.length; i += 1) {
      var item = this.state.notificationsDOM[i];
      item.querySelector('.notification-log-item-time').innerHTML = this.getRelativeTime(new Date(item.dataset.timestamp));
    }
  }
};

var Tile =
/*#__PURE__*/
function () {
  function Tile(element) {
    _classCallCheck(this, Tile);

    this.dom = {
      tile: element,
      header: element.querySelector('.header'),
      actions: element.querySelectorAll('.header .action'),
      id: element.id
    };
    this.events = {
      maximizeTile: new CustomEvent('maximizeTile', {
        detail: {
          id: this.dom.id,
          message: 'tile maximized'
        },
        bubbles: false,
        cancelable: true
      }),
      minimizeTile: new CustomEvent('minimizeTile', {
        detail: {
          id: this.dom.id,
          message: 'tile minimize'
        },
        bubbles: true,
        cancelable: true
      })
    };
  }

  _createClass(Tile, [{
    key: "init",
    value: function init() {
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this40 = this;

      var actions = this.dom.actions;

      if (actions) {
        Array.from(actions).forEach(function (action) {
          if (action.dataset.type === 'maximize') {
            action.addEventListener('click', function () {
              return _this40.toggleFullScreen(action);
            }, false);
          }
        });
      }

      this.dom.tile.addEventListener('maximizeTile', function (e) {
        return _this40.hideNotSelf(e);
      }, false);
      this.dom.tile.addEventListener('minimizeTile', function () {
        return _this40.show();
      }, false);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this41 = this;

      var actions = this.dom.actions;

      if (actions) {
        Array.from(actions).forEach(function (action) {
          if (action.dataset.type === 'maximize') {
            action.removeEventListener('click', function () {
              return _this41.toggleFullScreen(action);
            }, false);
          }
        });
      }

      this.dom.tile.removeEventListener('maximizeTile', function (e) {
        return _this41.hideNotSelf(e);
      }, false);
      this.dom.tile.removeEventListener('minimizeTile', function () {
        return _this41.show();
      }, false);
    }
  }, {
    key: "toggleFullScreen",
    value: function toggleFullScreen(action) {
      if (this.dom.tile.classList.contains('fullscreen')) {
        this.minimize(action);
      } else {
        this.maximize(action);
      }
    }
  }, {
    key: "maximize",
    value: function maximize(action) {
      this.setTooltipMessage(action, 'Minimize tile');
      this.dom.tile.classList.add('fullscreen');
      var icon = action.querySelector('.icon');
      icon.classList.add('icon-minimize');
      icon.classList.remove('icon-maximize');
      window.document.dispatchEvent(this.events.maximizeTile);
    }
  }, {
    key: "minimize",
    value: function minimize(action) {
      this.setTooltipMessage(action, 'Maximize tile');
      this.dom.tile.classList.remove('fullscreen');
      var icon = action.querySelector('.icon');
      icon.classList.remove('icon-minimize');
      icon.classList.add('icon-maximize');
      window.document.dispatchEvent(this.events.minimizeTile);
    }
  }, {
    key: "setTooltipMessage",
    value: function setTooltipMessage(action, message) {
      action.querySelector('.tooltip .message').innerText = message;
    }
  }, {
    key: "hide",
    value: function hide() {
      this.dom.tile.classList.add('hidden');
    }
  }, {
    key: "show",
    value: function show() {
      this.dom.tile.classList.remove('hidden');
    }
  }, {
    key: "hideNotSelf",
    value: function hideNotSelf(event) {
      if (event.detail.id !== this.dom.id) {
        this.dom.hide();
      }
    }
  }]);

  return Tile;
}();

var Page =
/*#__PURE__*/
function () {
  function Page() {
    _classCallCheck(this, Page);

    this.dom = {
      page: document,
      tiles: document.querySelectorAll('.tile')
    };
    this.tiles = [];
  }

  _createClass(Page, [{
    key: "init",
    value: function init() {
      var _this42 = this;

      if (this.dom.tiles) {
        Array.from(this.dom.tiles).forEach(function (tile) {
          var t = new Tile(tile);
          t.init();

          _this42.tiles.push(t);
        });
      }

      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.tiles) {
        this.tiles.forEach(function (tile) {
          tile.destroy();
        });
      }

      this.removeEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this43 = this;

      this.dom.page.addEventListener('maximizeTile', function (e) {
        return _this43.hideNotSelf(e);
      }, false);
      this.dom.page.addEventListener('minimizeTile', function () {
        return _this43.showAll();
      }, false);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this44 = this;

      this.dom.page.removeEventListener('maximizeTile', function (e) {
        return _this44.hideNotSelf(e);
      }, false);
      this.dom.page.removeEventListener('minimizeTile', function () {
        return _this44.showAll();
      }, false);
    }
  }, {
    key: "showAll",
    value: function showAll() {
      Array.from(this.tiles).forEach(function (tile) {
        tile.show();
      });
    }
  }, {
    key: "hideNotSelf",
    value: function hideNotSelf(event) {
      Array.from(this.tiles).forEach(function (tile) {
        if (tile.dom.id !== event.detail.id) {
          tile.hide();
        }
      });
    }
  }]);

  return Page;
}();

var Pagination =
/*#__PURE__*/
function () {
  function Pagination(element) {
    var _this45 = this;

    _classCallCheck(this, Pagination);

    this.dom = {
      paginationGroup: element
    };
    this.events = {
      paginationChangePage: new CustomEvent('paginationChangePage', {
        detail: {
          state: this.state
        }
      })
    };
    this.listeners = {
      setNumEntries: function setNumEntries(e) {
        if (e.detail.value.includes('entries-')) {
          _this45.state.numEntries = _this45.getNumEntries(e); // this.updateState();
        }
      }
    };
    this.state = {
      currentPage: 1,
      hasNextPage: true,
      hasPreviousPage: false,
      numEntries: 0,
      numPages: 0,
      pageClicked: 0
    };
  }

  _createClass(Pagination, [{
    key: "init",
    value: function init(nPages) {
      this.setNumPages(nPages);
      this.injectPaginationControls();
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this46 = this;

      document.addEventListener('menuItemSelected', function (e) {
        return _this46.listeners.setNumEntries(e);
      }, false);
      var paginationArray = Array.from(this.dom.paginationGroup.querySelectorAll('.pagination li'));
      paginationArray.forEach(function (item) {
        item.addEventListener('click', function () {
          _this46.state.pageClicked = item.dataset.value;

          _this46.updatePaginationDOM();

          document.dispatchEvent(_this46.events.paginationChangePage);
        });
      });
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this47 = this;

      document.removeEventListener('menuItemSelected', function (e) {
        return _this47.listeners.setNumEntries(e);
      }, false);
      var paginationArray = Array.from(this.dom.paginationGroup.querySelectorAll('.pagination li'));
      paginationArray.forEach(function (item) {
        item.removeEventListener('click', function () {
          _this47.state.pageClicked = item.dataset.value;

          _this47.updatePaginationDOM();

          document.dispatchEvent(_this47.events.paginationChangePage);
        });
      });
    }
  }, {
    key: "updatePaginationDOM",
    value: function updatePaginationDOM() {
      this.updateCurrentPage();
      this.setPaginationControls();
    }
  }, {
    key: "updateCurrentPage",
    value: function updateCurrentPage() {
      if (this.state.pageClicked.includes('left')) {
        if (this.state.currentPage > 1) {
          this.state.currentPage -= 1;
        }
      } // - Right arrow
      else if (this.state.pageClicked.includes('right')) {
          if (this.state.currentPage < this.state.numPages) {
            this.state.currentPage += 1;
          }
        } else if (this.state.pageClicked.length !== 0) {
          this.state.currentPage = this.state.pageClicked;
        }

      this.state.hasNextPage = true;
      this.state.hasPreviousPage = true;

      if (this.state.currentPage === 1) {
        this.state.hasNextPage = true;
        this.state.hasPreviousPage = false;
      }

      if (this.state.currentPage === this.state.numPages) {
        this.state.hasNextPage = false;
        this.state.hasPreviousPage = true;
      }
    }
  }, {
    key: "setNumPages",
    value: function setNumPages(nPages) {
      this.state.numPages = nPages;
    }
    /*
     * getNumPages(nRows, nEntries) {
     *   return Math.ceil(nRows / nEntries);
     * }
     */

  }, {
    key: "getNumEntries",
    value: function getNumEntries(event) {
      if (event) {
        return event.detail.value.split('entries-')[1];
      } else {
        // when method is invoked without event, obtain from dropdown DOM
        var dropdown = this.dom.paginationGroup.querySelector('.right .dropdown');
        var defaultEntries = dropdown.querySelector('.item.highlight');
        return parseInt(defaultEntries.dataset.value.split('entries-')[1], 10) || 10;
      }
    }
    /**
     * Generate pagination controls dynamically
     */

  }, {
    key: "injectPaginationControls",
    value: function injectPaginationControls() {
      var pagination = this.dom.paginationGroup.querySelector('.pagination');
      var leftArrow = this.genArrowControl('left', this.state.hasPreviousPage);
      var rightArrow = this.genArrowControl('right', this.state.hasNextPage);
      var nPages = this.state.numPages; // Inject Left arrow

      pagination.appendChild(leftArrow);
      /*
       * Inject the pages in between
       * - the first pages, ie: 1 2 3 4 5 ... 10
       */

      if (this.state.currentPage < 5) {
        for (var i = 1; i < nPages; i += 1) {
          var control = this.genPageControl(i, this.isCurrentPage(i));

          if (i === 6) {
            pagination.appendChild(this.genPageControl('', false));
            pagination.appendChild(this.genPageControl(nPages, this.isCurrentPage(i)));
            break;
          }

          pagination.appendChild(control);
        }
      } // the middle pages, ie: 1 ... n-1 n n+1 ... 10
      else if (this.state.currentPage < nPages - 3) {
          pagination.appendChild(this.genPageControl('1', false));
          pagination.appendChild(this.genPageControl('', false));

          for (var _i = this.state.currentPage - 1; _i <= this.state.currentPage + 1; _i += 1) {
            var _control = this.genPageControl(_i, this.isCurrentPage(_i));

            pagination.appendChild(_control);
          }

          pagination.appendChild(this.genPageControl('', false));
          pagination.appendChild(this.genPageControl(nPages, false));
        } // the last pages, ie: 1 ... 6 7 8 9 10
        else {
            pagination.appendChild(this.genPageControl('1', false));
            pagination.appendChild(this.genPageControl('', false));

            for (var _i2 = nPages - 4; _i2 <= nPages; _i2 += 1) {
              var _control2 = this.genPageControl(_i2, this.isCurrentPage(_i2));

              pagination.appendChild(_control2);
            }
          } // Inject Right arrow


      pagination.appendChild(rightArrow);
    }
    /**
     * Modifies the values of the DOM pages
     */

  }, {
    key: "setPaginationControls",
    value: function setPaginationControls() {
      var _this48 = this;

      var currentPage = parseInt(this.state.currentPage, 10);
      var numPages = parseInt(this.state.numPages, 10);
      var paginationArray = [];
      paginationArray.push({
        label: 'left',
        state: false
      });

      if (currentPage < 5) {
        for (var i = 1; i < this.state.numPages; i += 1) {
          if (i === 6) {
            paginationArray.push({
              label: '',
              state: false
            });
            paginationArray.push({
              label: this.state.numPages,
              state: this.isCurrentPage(i)
            });
            break;
          }

          paginationArray.push({
            label: i,
            state: this.isCurrentPage(i)
          });
        }
      } else if (currentPage < numPages - 3) {
        paginationArray.push({
          label: '1',
          state: false
        });
        paginationArray.push({
          label: '',
          state: false
        });

        for (var _i3 = currentPage - 1; _i3 <= currentPage + 1; _i3 += 1) {
          paginationArray.push({
            label: _i3,
            state: this.isCurrentPage(_i3)
          });
        }

        paginationArray.push({
          label: '',
          state: false
        });
        paginationArray.push({
          label: this.state.numPages,
          state: false
        });
      } else {
        paginationArray.push({
          label: 1,
          state: false
        });
        paginationArray.push({
          label: '',
          state: false
        });

        for (var _i4 = numPages - 4; _i4 <= numPages; _i4 += 1) {
          paginationArray.push({
            label: _i4,
            state: this.isCurrentPage(_i4)
          });
        }
      }

      paginationArray.push({
        label: 'right',
        state: false
      });
      var lis = this.dom.paginationGroup.querySelectorAll('.pagination li');
      Array.from(lis).forEach(function (item, i) {
        var label = paginationArray[i].label;
        var state = paginationArray[i].state;

        if (label === 'left') {
          _this48.setArrowControl(item, 'left', _this48.state.hasPreviousPage);
        } else if (label === 'right') {
          _this48.setArrowControl(item, 'right', _this48.state.hasNextPage);
        } else {
          _this48.setPageControl(item, label, state);
        }
      });
    }
  }, {
    key: "genArrowControl",
    value: function genArrowControl(direction, state) {
      var li = document.createElement('li');
      var i = document.createElement('i');
      li.classList.add("".concat(direction, "-arrow"));

      if (state) {
        li.classList.remove('disabled');
      } else {
        li.classList.add('disabled');
      }

      li.dataset.value = direction;
      i.classList.add('icon');
      i.classList.add("icon-arrow-".concat(direction));
      li.appendChild(i);
      return li;
    }
  }, {
    key: "genPageControl",
    value: function genPageControl(label, state) {
      var li = document.createElement('li');

      if (state) {
        li.classList.add('active');
      }

      li.dataset.value = label;
      li.innerText = label;
      return li;
    }
  }, {
    key: "setArrowControl",
    value: function setArrowControl(element, direction, state) {
      var i = element.querySelector('i');
      element.classList.add("".concat(direction, "-arrow"));

      if (state) {
        element.classList.remove('disabled');
      } else {
        element.classList.add('disabled');
      }

      element.dataset.value = direction;
      i.classList.add('icon');
      i.classList.add("icon-arrow-".concat(direction));
    }
  }, {
    key: "setPageControl",
    value: function setPageControl(element, label, state) {
      if (state) {
        element.classList.add('active');
      } else {
        element.classList.remove('active');
      }

      element.dataset.value = label;
      element.innerText = label;
    }
  }, {
    key: "isCurrentPage",
    value: function isCurrentPage(pageNum) {
      return parseInt(pageNum, 10) === parseInt(this.state.currentPage, 10);
    }
  }]);

  return Pagination;
}();

var Pill =
/*#__PURE__*/
function () {
  /**
   * Setup pill properties
   * @param {HTMLElement} element - The DOM element of the pill
   */
  function Pill(element) {
    _classCallCheck(this, Pill);

    this.dom = {
      pill: element
    };
  }
  /**
   * Initialize the pill
   */


  _createClass(Pill, [{
    key: "init",
    value: function init() {
      this.addEventListeners();
    }
    /**
     * Destroy the pill and associated events
     */

  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();

      if (this.dom.pill && this.dom.pill.parentNode) {
        this.dom.pill.parentNode.removeChild(this.dom.pill);
      }
    }
    /**
     * Add event listeners
     * @private
     */

  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this49 = this;

      this.dom.pill.addEventListener('click', function () {
        return _this49.onClick();
      }, false);
    }
    /**
     * Remove event listeners
     * @private
     */

  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this50 = this;

      this.dom.pill.removeEventListener('click', function () {
        return _this50.onClick();
      }, false);
    }
    /**
     * What happens on the click event
     * @private
     */

  }, {
    key: "onClick",
    value: function onClick() {
      this.toggle();
      this.remove();
    }
    /**
     * Toggle the pill
     */

  }, {
    key: "toggle",
    value: function toggle() {
      if (this.dom.pill.classList.contains('unselected')) {
        this.select();
      } else {
        this.unselect();
      }
    }
    /**
     * Select the pill
     */

  }, {
    key: "select",
    value: function select() {
      this.dom.pill.classList.remove('unselected');
    }
    /**
     * Unselect the pill
     */

  }, {
    key: "unselect",
    value: function unselect() {
      this.dom.pill.classList.add('unselected');
    }
    /**
     * Remove the pill
     */

  }, {
    key: "remove",
    value: function remove() {
      if (this.dom.pill.classList.contains('removable')) {
        this.destroy();
      }
    }
  }]);

  return Pill;
}();

var Prefill =
/*#__PURE__*/
function () {
  function Prefill(element) {
    var _this51 = this;

    _classCallCheck(this, Prefill);

    this.dom = {
      prefill: element,
      saved: element.dataset.saved
    };
    this.listeners = {
      blur: function blur(e) {
        return _this51.checkIfChanged(e);
      }
    };
  }

  _createClass(Prefill, [{
    key: "init",
    value: function init() {
      this.setSavedValue();
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      this.dom.prefill.addEventListener('blur', this.listeners.blur, false);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      this.dom.prefill.removeEventListener('blur', this.listeners.blur, false);
    }
  }, {
    key: "setSavedValue",
    value: function setSavedValue() {
      this.dom.prefill.value = this.dom.saved;
    }
  }, {
    key: "checkIfChanged",
    value: function checkIfChanged(e) {
      if (e.target.value !== this.dom.saved) {
        this.dom.prefill.classList.add('changed');
      } else {
        this.dom.prefill.classList.remove('changed');
      }
    }
  }]);

  return Prefill;
}();

var SignIn =
/*#__PURE__*/
function () {
  function SignIn(element) {
    var _this52 = this;

    var loggedInUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';

    _classCallCheck(this, SignIn);

    this.dom = {
      signin: element,
      reveal: element.querySelector('.reveal'),
      inputPassword: element.querySelector('#password'),
      form: element.querySelector('form'),
      error: element.querySelector('.error'),
      welcome: element.querySelector('.welcome'),
      loggedInUrl: loggedInUrl
    };
    this.listeners = {
      click: function click() {
        return _this52.revealPassword();
      },
      blur: function blur(e) {
        return _this52.validateFieldOnBlur(e);
      },
      submit: function submit(e) {
        return _this52.validateFormOnSubmit(e);
      }
    };
    this.messages = {
      valueMissing: 'Please fill out this field.',
      typeMismatch: {
        email: 'Please use a valid email.',
        fallback: 'Please use the correct input type.'
      },
      patternMismatch: {
        signum: 'Please use a valid signum.',
        fallback: 'Please match the requested format.'
      },
      fallback: 'Please enter a correct value for this field.'
    };
    this.props = {
      validFields: []
    };
  }

  _createClass(SignIn, [{
    key: "init",
    value: function init() {
      this.removeNativeValidation();
      this.addEventListeners(); // this.showGenericError();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      this.dom.reveal.addEventListener('click', this.listeners.click, false);
      this.dom.signin.addEventListener('blur', this.listeners.blur, true);
      this.dom.signin.addEventListener('submit', this.listeners.submit, true);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      this.dom.reveal.removeEventListener('click', this.listeners.click, false);
      this.dom.signin.removeEventListener('blur', this.listeners.blur, false);
      this.dom.signin.removeEventListener('submit', this.listeners.submit, false);
    }
  }, {
    key: "revealPassword",
    value: function revealPassword() {
      var icon = this.dom.signin.querySelector('.reveal .icon');
      var message = this.dom.reveal.querySelector('.message');

      if (this.dom.inputPassword.type === 'password') {
        this.dom.inputPassword.type = 'text';
        icon.classList.remove('icon-eye');
        icon.classList.add('icon-eye-solid');
        message.innerText = 'Hide password';
      } else {
        this.dom.inputPassword.type = 'password';
        icon.classList.remove('icon-eye-solid');
        icon.classList.add('icon-eye');
        message.innerText = 'Show password';
      }
    }
  }, {
    key: "removeNativeValidation",
    value: function removeNativeValidation() {
      this.dom.form.setAttribute('novalidate', true);
    }
  }, {
    key: "validateFieldOnBlur",
    value: function validateFieldOnBlur(e) {
      var inputField = e.target;
      var field = inputField.parentNode;
      var hint = field.querySelector('.hint');

      if (field.classList.contains('validate')) {
        var error = this.getErrorType(inputField);

        if (error && error !== this.messages.valueMissing) {
          hint.innerText = error;
          inputField.classList.add('invalid');
        } else {
          inputField.classList.remove('invalid');
          inputField.classList.add('hidden');
        }
      }
    }
  }, {
    key: "validateFormOnSubmit",
    value: function validateFormOnSubmit(e) {
      var _this53 = this;

      var formFields = e.target.querySelectorAll('.field');
      Array.from(formFields).forEach(function (field, i) {
        var inputField = field.querySelector('input');
        var hint = field.querySelector('.hint');

        var error = _this53.getErrorType(inputField);

        if (error) {
          hint.innerText = error;
          inputField.classList.add('invalid');
          e.preventDefault();
          _this53.props.validFields[i] = false;
        } else {
          inputField.classList.remove('invalid');
          inputField.classList.add('hidden');
          _this53.props.validFields[i] = true;
        }
      });
      var allFieldsValid = this.props.validFields.every(function (state) {
        return state === true;
      }); // This is just for demo purposes

      if (allFieldsValid) {
        this.successSignIn();
      }
    }
  }, {
    key: "getErrorType",
    value: function getErrorType(field) {
      if (field.disabled || field.type === 'file' || field.type === 'reset' || field.type === 'submit' || field.type === 'button') {
        return;
      }

      var validity = field.validity;
      if (validity.valid) return;
      if (validity.valueMissing) return this.messages.valueMissing;

      if (validity.typeMismatch) {
        if (field.type === 'email') return this.messages.typeMismatch.email;
        return this.messages.typeMismatch.fallback;
      }

      if (validity.patternMismatch) {
        if (field.classList.contains('signum')) return this.messages.patternMismatch.signum;
        return this.messages.patternMismatch.fallback;
      }

      return this.messages.fallback;
    }
  }, {
    key: "successSignIn",
    value: function successSignIn() {
      var _this54 = this;

      this.hideSignInForm();
      this.showWelcomeScreen(); // This is just for demo purposes

      setTimeout(function () {
        window.location.href = _this54.dom.loggedInUrl;
      }, 3000);
    }
  }, {
    key: "showWelcomeScreen",
    value: function showWelcomeScreen() {
      this.dom.welcome.classList.remove('hidden');
    }
  }, {
    key: "hideSignInForm",
    value: function hideSignInForm() {
      this.dom.form.classList.add('hidden');
    }
  }]);

  return SignIn;
}();

var Slider =
/*#__PURE__*/
function () {
  function Slider(element) {
    var _this55 = this;

    _classCallCheck(this, Slider);

    this.dom = {
      slider: element,
      input: element.querySelector('input'),
      valueHolder: element.querySelector('.value')
    };
    this.listeners = {
      change: function change() {
        return _this55.updateValueHolder();
      }
    };
    this.properties = {
      oldValue: this.dom.input.value
    };
  }

  _createClass(Slider, [{
    key: "init",
    value: function init() {
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      this.dom.slider.addEventListener('change', this.listeners.change, false);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      this.dom.slider.removeEventListener('change', this.listeners.change, false);
    }
  }, {
    key: "updateValueHolder",
    value: function updateValueHolder() {
      if (this.dom.valueHolder.innerHTML) {
        this.dom.valueHolder.innerHTML = this.dom.input.value;
      }
    }
  }]);

  return Slider;
}();

var Spinner =
/*#__PURE__*/
function () {
  function Spinner(element) {
    _classCallCheck(this, Spinner);

    this.dom = {
      spinner: element,
      controls: element.querySelectorAll('.controls > .icon'),
      max: element.querySelector('input').getAttribute('max') || Number.MAX_VALUE,
      min: element.querySelector('input').getAttribute('min') || -Number.MAX_VALUE,
      step: element.querySelector('input').getAttribute('step') || 1,
      input: element.querySelector('input')
    };
    this.type = element.dataset.type;
    this.zeroLeading = element.dataset.zeroLeading;
    this.events = {
      changeTimerValue: new CustomEvent('changeTimerValue', {
        detail: {
          message: 'value changed'
        },
        bubbles: true,
        cancelable: true
      })
    };
  }

  _createClass(Spinner, [{
    key: "init",
    value: function init() {
      if (this.type !== 'text') this.setCorrectState();
      this.addEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this56 = this;

      switch (this.type) {
        case 'text':
          this.dom.controls[0].addEventListener('click', function () {
            return _this56.toggleTimeMode();
          }, false);
          break;

        default:
          this.dom.controls[1].addEventListener('click', function () {
            return _this56.increaseValue();
          }, false);
          this.dom.controls[0].addEventListener('click', function () {
            return _this56.decreaseValue();
          }, false);
          this.dom.input.addEventListener('change', function (e) {
            return _this56.addLeadingZero(e);
          }, false);
          this.dom.input.addEventListener('keyup', function () {
            return _this56.setCorrectFormat();
          }, false);
      }
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this57 = this;

      switch (this.type) {
        case 'text':
          this.dom.controls[0].removeEventListener('click', function () {
            return _this57.toggleTimeMode();
          }, false);
          break;

        default:
          this.dom.controls[1].removeEventListener('click', function () {
            return _this57.increaseValue();
          }, false);
          this.dom.controls[0].removeEventListener('click', function () {
            return _this57.decreaseValue();
          }, false);
          this.dom.input.removeEventListener('change', function (e) {
            return _this57.addLeadingZero(e);
          }, false);
          this.dom.input.removeEventListener('keyup', function () {
            return _this57.setCorrectFormat();
          }, false);
      }
    }
  }, {
    key: "addLeadingZero",
    value: function addLeadingZero(event) {
      this.setCorrectFormat();

      if (event.target.value < 10) {
        event.target.value = this.leadingZero(event.target.value);
      }

      this.setCorrectState();
    }
  }, {
    key: "toggleTimeMode",
    value: function toggleTimeMode() {
      var input = this.dom.spinner.querySelector('input');

      if (input.value === 'AM') {
        input.value = 'PM';
      } else {
        input.value = 'AM';
      }

      this.dom.spinner.dispatchEvent(this.events.changeTimerValue);
    }
  }, {
    key: "setCorrectState",
    value: function setCorrectState() {
      var input = this.dom.spinner.querySelector('input');
      this.dom.controls[0].classList.remove('disabled');
      this.dom.controls[1].classList.remove('disabled');

      if (parseInt(input.value, 10) === this.dom.max) {
        this.dom.controls[1].classList.add('disabled');
      }

      if (parseInt(input.value, 10) === this.dom.min) {
        this.dom.controls[0].classList.add('disabled');
      }
    }
  }, {
    key: "setCorrectFormat",
    value: function setCorrectFormat() {
      var input = this.dom.spinner.querySelector('input');

      if (!isNaN(parseInt(input.value, 10))) {
        if (parseInt(input.value, 10) > this.dom.max) {
          input.value = this.dom.max;
        }

        if (parseInt(input.value, 10) < this.dom.min) {
          input.value = this.dom.min;
        }
      } else {
        // not a number
        input.value = this.dom.min;
      }
    }
  }, {
    key: "increaseValue",
    value: function increaseValue() {
      var input = this.dom.spinner.querySelector('input');

      if (parseInt(input.value, 10) < this.dom.max) {
        input.value = this.leadingZero(parseInt(input.value, 10) + parseInt(this.dom.step, 10));
      }

      this.setCorrectState();
      this.dom.spinner.dispatchEvent(this.events.changeTimerValue);
    }
  }, {
    key: "decreaseValue",
    value: function decreaseValue() {
      var input = this.dom.spinner.querySelector('input');

      if (parseInt(input.value, 10) > this.dom.min) {
        input.value = this.leadingZero(parseInt(input.value, 10) - parseInt(this.dom.step, 10));
      }

      this.setCorrectState();
      this.dom.spinner.dispatchEvent(this.events.changeTimerValue);
    }
  }, {
    key: "leadingZero",
    value: function leadingZero(number) {
      var n = parseInt(number, 10);
      var result = n;
      if (n < 10 && this.zeroLeading) result = '0' + n;
      return result;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }]);

  return Spinner;
}();

var Tab =
/*#__PURE__*/
function () {
  function Tab(json) {
    _classCallCheck(this, Tab);

    this.dom = {
      title: json.title,
      content: json.content
    };
  }

  _createClass(Tab, [{
    key: "showContent",
    value: function showContent() {
      this.dom.title.classList.add('selected');
      this.dom.content.classList.add('selected');
    }
  }, {
    key: "hideContent",
    value: function hideContent() {
      this.dom.title.classList.remove('selected');
      this.dom.content.classList.remove('selected');
    }
  }]);

  return Tab;
}();

var TabGroup =
/*#__PURE__*/
function () {
  function TabGroup(element) {
    _classCallCheck(this, TabGroup);

    this.dom = {
      tabGroup: element,
      titles: element.querySelectorAll('.title'),
      contents: element.querySelectorAll('.contents > .content')
    };
    this.tabs = [];
  }

  _createClass(TabGroup, [{
    key: "init",
    value: function init() {
      this.initTabs();
      this.addEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this58 = this;

      Array.from(this.tabs).forEach(function (tab) {
        tab.dom.title.addEventListener('click', function () {
          _this58.hideAll();

          tab.showContent();
        });
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this59 = this;

      Array.from(this.tabs).forEach(function (tab) {
        tab.dom.title.removeEventListener('click', function () {
          _this59.hideAll();

          tab.showContent();
        });
      });
    }
  }, {
    key: "hideAll",
    value: function hideAll() {
      Array.from(this.tabs).forEach(function (tab) {
        return tab.hideContent();
      });
    }
  }, {
    key: "initTabs",
    value: function initTabs() {
      for (var i = 0; i < this.dom.titles.length; i += 1) {
        var t = new Tab({
          title: this.dom.titles[i],
          content: this.dom.contents[i]
        });
        this.tabs.push(t);
      }
    }
  }]);

  return TabGroup;
}();

var TableSelectable =
/*#__PURE__*/
function () {
  function TableSelectable(element) {
    var _this60 = this;

    _classCallCheck(this, TableSelectable);

    this.dom = {
      table: element,
      rows: element.querySelectorAll('tr'),
      bodyRows: element.querySelectorAll('tbody tr'),
      masterCheckbox: element.querySelector('thead input[type="checkbox"]')
    };
    this.listeners = {
      clickBodyRow: function clickBodyRow(row) {
        _this60.toggleRowCheckbox(row);

        _this60.setMasterCheckboxState();
      },
      clickMasterCheckbox: function clickMasterCheckbox() {
        _this60.toggleAllCheckboxes();

        _this60.setMasterCheckboxState();
      }
    };
    this.settings = {
      selectRowOnFirstTDClick: true
    };
    this.events = {
      tableRowsSelected: new CustomEvent('tableRowsSelected', {
        detail: {
          body: undefined,
          selected: undefined
        }
      })
    };
  }

  _createClass(TableSelectable, [{
    key: "init",
    value: function init() {
      this.setMasterCheckboxState();
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this61 = this;

      if (this.isSelectable()) {
        Array.from(this.dom.bodyRows).forEach(function (bodyRow) {
          if (_this61.settings.selectRowOnFirstTDClick) {
            var checkboxTD = bodyRow.querySelector('td');
            checkboxTD.addEventListener('click', function () {
              return _this61.listeners.clickBodyRow(bodyRow);
            }, false);
          } else {
            bodyRow.addEventListener('click', function () {
              return _this61.listeners.clickBodyRow(bodyRow);
            }, false);
          }
        });
        this.dom.masterCheckbox.addEventListener('click', function () {
          return _this61.listeners.clickMasterCheckbox();
        }, false);
      }
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this62 = this;

      if (this.isSelectable()) {
        Array.from(this.dom.bodyRows).forEach(function (bodyRow) {
          if (_this62.settings.selectRowOnFirstTDClick) {
            var checkboxTD = bodyRow.querySelectorAll('td')[0];
            checkboxTD.removeEventListener('click', function () {
              return _this62.listeners.clickBodyRow(bodyRow);
            }, false);
          } else {
            bodyRow.removeEventListener('click', function () {
              return _this62.listeners.clickBodyRow(bodyRow);
            }, false);
          }
        });
        this.dom.masterCheckbox.removeEventListener('click', function () {
          return _this62.listeners.clickMasterCheckbox();
        }, false);
      }
    }
  }, {
    key: "toggleRowCheckbox",
    value: function toggleRowCheckbox(row) {
      if (row.classList.contains('selected')) {
        this.unselectRow(row);
      } else {
        this.selectRow(row);
      }
    }
  }, {
    key: "toggleAllCheckboxes",
    value: function toggleAllCheckboxes() {
      var _this63 = this;

      Array.from(this.dom.bodyRows).forEach(function (brow) {
        if (_this63.dom.masterCheckbox.checked) {
          _this63.selectRow(brow);
        } else {
          _this63.unselectRow(brow);
        }
      });
    }
  }, {
    key: "setMasterCheckboxState",
    value: function setMasterCheckboxState() {
      var numBodyRows = this.getNumberOfRows();
      var numCheckedRows = this.getNumberOfSelectedRows();
      this.dom.masterCheckbox.checked = numCheckedRows > 0;
      this.dom.masterCheckbox.indeterminate = numCheckedRows > 0 && numCheckedRows < numBodyRows;
    }
  }, {
    key: "getNumberOfSelectedRows",
    value: function getNumberOfSelectedRows() {
      var n = this.dom.table.querySelectorAll('tbody input[type="checkbox"]:checked').length;
      this.events.tableRowsSelected.detail.body = this.getNumberOfRows();
      this.events.tableRowsSelected.detail.selected = n;
      document.dispatchEvent(this.events.tableRowsSelected);
      return n;
    }
  }, {
    key: "getNumberOfRows",
    value: function getNumberOfRows() {
      return Array.from(this.dom.bodyRows).length;
    }
  }, {
    key: "selectRow",
    value: function selectRow(row) {
      var checkbox = row.querySelector('input[type="checkbox"]');
      row.classList.add('selected');
      checkbox.checked = true;
    }
  }, {
    key: "unselectRow",
    value: function unselectRow(row) {
      var checkbox = row.querySelector('input[type="checkbox"]');
      row.classList.remove('selected');
      checkbox.checked = false;
    } // Returns true if the table contains the 'selectable' class

  }, {
    key: "isSelectable",
    value: function isSelectable() {
      return !!this.dom.table.classList.contains('selectable');
    }
  }]);

  return TableSelectable;
}();

var Tree =
/*#__PURE__*/
function () {
  function Tree(element) {
    _classCallCheck(this, Tree);

    this.dom = {
      accordion: element,
      titles: element.querySelectorAll('.title')
    };
  }

  _createClass(Tree, [{
    key: "toggleAccordion",
    value: function toggleAccordion(title) {
      title.classList.toggle('opened');
    }
  }, {
    key: "init",
    value: function init() {
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var self = this;
      Array.from(this.dom.titles).forEach(function (title) {
        title.addEventListener('click', function () {
          return self.toggleAccordion(title);
        }, false);
      });
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var self = this;
      Array.from(this.dom.titles).forEach(function (title) {
        title.removeEventListener('click', function () {
          return self.toggleAccordion(title);
        }, false);
      });
    }
  }]);

  return Tree;
}();

var WizardContent =
/*#__PURE__*/
function () {
  function WizardContent(element) {
    _classCallCheck(this, WizardContent);

    this.dom = {
      content: element
    };
  }

  _createClass(WizardContent, [{
    key: "init",
    value: function init() {
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this64 = this;

      window.addEventListener('wizardState', function (e) {
        return _this64.showCorrectContent(e);
      }, false);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this65 = this;

      window.removeEventListener('wizardState', function (e) {
        return _this65.showCorrectContent(e);
      }, false);
    }
  }, {
    key: "showCorrectContent",
    value: function showCorrectContent(event) {
      var _this66 = this;

      var currentStep = event.detail.state.currentStep;
      var contents = this.dom.content.querySelectorAll('.content');
      Array.from(contents).forEach(function (content, i) {
        if (i === currentStep) {
          _this66.showContent(content);
        } else {
          _this66.hideContent(content);
        }
      });
    }
  }, {
    key: "showContent",
    value: function showContent(content) {
      content.classList.remove('hidden');
    }
  }, {
    key: "hideContent",
    value: function hideContent(content) {
      content.classList.add('hidden');
    }
  }]);

  return WizardContent;
}();

var WizardFooter =
/*#__PURE__*/
function () {
  function WizardFooter(element) {
    _classCallCheck(this, WizardFooter);

    this.dom = {
      wizardFooter: element,
      nextAction: element.querySelector('#wizard-next'),
      prevAction: element.querySelector('#wizard-previous')
    };
    this.target = element.dataset.target;
    this.wizardState = undefined;
    this.events = {
      wizardStateChange: new CustomEvent('wizardStateChange', {
        detail: {
          message: 'state changed'
        },
        bubbles: true,
        cancelable: true
      }),
      wizardShowNextSteps: new CustomEvent('wizardShowNextSteps', {
        detail: {
          message: 'show next steps'
        },
        bubbles: true,
        cancelable: true
      }),
      wizardShowPrevSteps: new CustomEvent('wizardShowPrevSteps', {
        detail: {
          message: 'show prev steps'
        },
        bubbles: true,
        cancelable: true
      })
    };
  }

  _createClass(WizardFooter, [{
    key: "init",
    value: function init() {
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this67 = this;

      this.dom.nextAction.addEventListener('click', function () {
        return _this67.nextStep();
      }, false);
      this.dom.prevAction.addEventListener('click', function () {
        return _this67.prevStep();
      }, false);
      document.addEventListener('wizardState', function (e) {
        return _this67.updateButtons(e);
      }, false);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this68 = this;

      this.dom.nextAction.removeEventListener('click', function () {
        return _this68.nextStep();
      }, false);
      this.dom.prevAction.removeEventListener('click', function () {
        return _this68.prevStep();
      }, false);
      document.removeEventListener('wizardState', function (e) {
        return _this68.updateButtons(e);
      }, false);
    }
  }, {
    key: "nextStep",
    value: function nextStep() {
      var currentStep = this.wizardState.currentStep;
      var lastStepPresentation = this.wizardState.presentation.slice(-1)[0];

      if (currentStep >= 0 && currentStep < this.wizardState.numSteps) {
        this.wizardState.currentStep += 1;
        this.events.wizardStateChange.detail.state = this.wizardState;
        document.dispatchEvent(this.events.wizardStateChange);

        if (currentStep === lastStepPresentation - 1) {
          document.dispatchEvent(this.events.wizardShowNextSteps);
        }
      }
    }
  }, {
    key: "prevStep",
    value: function prevStep() {
      var currentStep = this.wizardState.currentStep;
      var firstStepPresentation = this.wizardState.presentation[0];

      if (currentStep > 0) {
        this.wizardState.currentStep -= 1;
        this.events.wizardStateChange.detail.state = this.wizardState;
        document.dispatchEvent(this.events.wizardStateChange);

        if (currentStep === firstStepPresentation) {
          document.dispatchEvent(this.events.wizardShowPrevSteps);
        }
      }
    }
  }, {
    key: "updateButtons",
    value: function updateButtons(event) {
      this.wizardState = event.detail.state;
      var currentStep = event.detail.state.currentStep;

      if (currentStep === event.detail.state.numSteps - 1) {
        this.dom.nextAction.innerHTML = 'Finish';
      } else {
        this.dom.nextAction.disabled = false;
        this.dom.nextAction.innerHTML = '<span class="term">Next</span> <i class="icon icon-arrow-right"></i>';
      }

      if (currentStep > 0) {
        this.dom.prevAction.classList.remove('hidden');
      } else {
        this.dom.prevAction.classList.add('hidden');
      }

      if (currentStep === event.detail.state.numSteps) {
        this.dom.nextAction.innerHTML = 'Finished';

        if (this.dom.prevAction.parentNode !== null) {
          this.dom.prevAction.parentNode.removeChild(this.dom.prevAction);
          this.dom.prevAction.disabled = false;
        }

        this.dom.nextAction.disabled = true;
      }
    }
  }]);

  return WizardFooter;
}();

var WizardSteps =
/*#__PURE__*/
function () {
  function WizardSteps(element) {
    _classCallCheck(this, WizardSteps);

    this.dom = {
      wizard: element,
      arrows: element.querySelectorAll('.arrow'),
      steps: element.querySelectorAll('.step'),
      points: null,
      id: element.getAttribute('id')
    };
    this.state = null;
    this.scenario = 4;
    this.type = element.dataset.type; // this.contentTarget = element.dataset.content;

    this.events = {
      wizardState: new CustomEvent('wizardState', {
        detail: {
          message: 'state changed'
        },
        bubbles: true,
        cancelable: true
      })
    };
  }

  _createClass(WizardSteps, [{
    key: "init",
    value: function init() {
      this.setInitState();
      this.setInitContext();
      this.updateScenario();
      this.addEventListeners();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.addEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this69 = this;

      var leftArrowDOM = this.dom.wizard.querySelector('.arrow.left');
      var rightArrowDOM = this.dom.wizard.querySelector('.arrow.right');
      rightArrowDOM.addEventListener('click', function () {
        return _this69.showNextSteps();
      }, false);
      leftArrowDOM.addEventListener('click', function () {
        return _this69.showPrevSteps();
      }, false);
      window.addEventListener('resize', function () {
        return _this69.updateScenario();
      }, false); // add links to completed steps

      Array.from(this.dom.steps).forEach(function (step, i) {
        step.addEventListener('click', function () {
          if (step.classList.contains('completed')) _this69.go2Step(i);
        }, false);
      });
      document.addEventListener('wizardStateChange', function (e) {
        return _this69.updateState(e);
      }, false);
      document.addEventListener('wizardShowNextSteps', function () {
        return _this69.showNextSteps();
      }, false);
      document.addEventListener('wizardShowPrevSteps', function () {
        return _this69.showPrevSteps();
      }, false);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _this70 = this;

      var leftArrowDOM = this.dom.wizard.querySelector('.arrow.left');
      var rightArrowDOM = this.dom.wizard.querySelector('.arrow.right');
      rightArrowDOM.removeEventListener('click', function () {
        return _this70.showNextSteps();
      }, false);
      leftArrowDOM.removeEventListener('click', function () {
        return _this70.showPrevSteps();
      }, false);
      window.removeEventListener('resize', function () {
        return _this70.updateScenario();
      }, false); // add links to completed steps

      Array.from(this.dom.steps).forEach(function (step, i) {
        step.removeEventListener('click', function () {
          if (step.classList.contains('completed')) _this70.go2Step(i);
        }, false);
      });
      document.removeEventListener('wizardStateChange', function (e) {
        return _this70.updateState(e);
      }, false);
      document.removeEventListener('wizardShowNextSteps', function () {
        return _this70.showNextSteps();
      }, false);
      document.removeEventListener('wizardShowPrevSteps', function () {
        return _this70.showPrevSteps();
      }, false);
    }
  }, {
    key: "updateState",
    value: function updateState(event) {
      this.state = event.detail.state;
      this.updateDOM();
    }
  }, {
    key: "showArrow",
    value: function showArrow(arrowDirection) {
      switch (arrowDirection) {
        case 'left':
          this.dom.arrows[0].classList.add('visible');
          break;

        case 'right':
          this.dom.arrows[1].classList.add('visible');
          break;
      }
    }
  }, {
    key: "hideArrow",
    value: function hideArrow(arrowDirection) {
      switch (arrowDirection) {
        case 'left':
          this.dom.arrows[0].classList.remove('visible');
          break;

        case 'right':
          this.dom.arrows[1].classList.remove('visible');
          break;
      }
    }
  }, {
    key: "setInitState",
    value: function setInitState() {
      var indexArray = Array.from(this.dom.steps).map(function (step, i) {
        return i;
      });
      this.state = {
        currentStep: 0,
        refIndex: 0,
        numSteps: this.dom.steps.length,
        allSteps: indexArray,
        presentation: indexArray.slice(0, this.scenario),
        prevSteps: [],
        nextSteps: indexArray.slice(this.scenario, this.dom.steps.length)
      }; // add state to the event detail

      this.events.wizardState.detail.state = this.state;
      document.dispatchEvent(this.events.wizardState);
    }
  }, {
    key: "showNextSteps",
    value: function showNextSteps() {
      this.state.refIndex += 1;
      var potentialPresentation = this.state.allSteps.slice(this.state.refIndex, this.state.refIndex + this.scenario);
      if (potentialPresentation.length <= this.scenario) this.state.presentation = potentialPresentation;
      this.state.prevSteps = this.state.allSteps.slice(0, this.state.refIndex);
      this.state.nextSteps = this.state.allSteps.slice(this.state.refIndex + this.scenario, this.dom.steps.length);
      this.updateDOM();
    }
  }, {
    key: "showPrevSteps",
    value: function showPrevSteps() {
      this.state.refIndex -= 1;
      this.state.presentation = this.state.allSteps.slice(this.state.refIndex, this.state.refIndex + this.scenario);
      this.state.prevSteps = this.state.allSteps.slice(0, this.state.refIndex);
      this.state.nextSteps = this.state.allSteps.slice(this.state.refIndex + this.scenario, this.dom.steps.length);
      this.updateDOM();
    }
  }, {
    key: "nextStep",
    value: function nextStep() {
      this.state.currentStep += 1;
      this.updateDOM();
    }
  }, {
    key: "prevStep",
    value: function prevStep() {
      this.state.currentStep -= 1;
      this.updateDOM();
    }
  }, {
    key: "updateDOM",
    value: function updateDOM() {
      // keep values within limits
      this.keepRefIndexInBounds(); // wizard step update

      this.updateDOMCurrentState(); // wizard visibility

      this.updateDOMArrows();
      this.updateDOMStepsVisibility(); // wizard navigation

      this.updateDOMContext(); // dispatch change state event

      this.events.wizardState.detail.state = this.state;
      this.dom.wizard.dispatchEvent(this.events.wizardState);
    }
  }, {
    key: "updateDOMArrows",
    value: function updateDOMArrows() {
      if (this.state.nextSteps.length > 0) {
        this.showArrow('right');
      } else {
        this.hideArrow('right');
      }

      if (this.state.prevSteps.length > 0) {
        this.showArrow('left');
      } else {
        this.hideArrow('left');
      }
    }
  }, {
    key: "updateDOMCurrentState",
    value: function updateDOMCurrentState() {
      var _this71 = this;

      Array.from(this.dom.steps).forEach(function (step, i) {
        // remove previous "current" states
        step.classList.remove('current');
        if (i < _this71.state.currentStep) step.classList.add('completed'); // add correct current step

        if (i === _this71.state.currentStep) step.classList.add('current');
      });
    }
  }, {
    key: "updateDOMStepsVisibility",
    value: function updateDOMStepsVisibility() {
      var _this72 = this;

      Array.from(this.dom.steps).forEach(function (step, i) {
        step.classList.add('hidden');
        step.classList.remove('visible');

        if (_this72.state.presentation.indexOf(i) > -1) {
          step.classList.remove('hidden'); // to impose over the @media style

          step.classList.add('visible');
        }
      });
    }
  }, {
    key: "updateDOMContext",
    value: function updateDOMContext() {
      var _this73 = this;

      Array.from(this.dom.points).forEach(function (point, i) {
        // remove previous "current" points
        point.classList.remove('current'); // add correct current point

        if (i === _this73.state.currentStep) point.classList.add('current'); // update "out-of-context" points

        point.classList.add('out-of-presentation');

        if (_this73.state.presentation.indexOf(i) > -1) {
          point.classList.remove('out-of-presentation');
        }
      });
    }
  }, {
    key: "setInitContext",
    value: function setInitContext() {
      var _this74 = this;

      var navigation = document.createElement('div');
      navigation.classList.add('navigation');
      Array.from(this.state.allSteps).forEach(function (step, i) {
        var point = document.createElement('div');
        point.classList.add('point'); // set current

        if (i === 0) point.classList.add('current'); // set out-of-context if any

        if (_this74.state.nextSteps.indexOf(i) > -1) {
          point.classList.add('out-of-presentation');
        }

        navigation.appendChild(point);
      });
      this.dom.wizard.appendChild(navigation);
      this.dom.points = this.dom.wizard.querySelectorAll('.point');
    } // JS responsive steps

  }, {
    key: "updateScenario",
    value: function updateScenario() {
      var width = window.innerWidth;

      switch (true) {
        /*
         * case (width >= 1400):
         *   this.scenario = 6;
         *   break;
         * case (width < 1400 && width >= 1200):
         *   this.scenario = 5;
         *   break;
         */
        case width < 1200 && width >= 1000:
          this.scenario = 4;
          break;

        case width < 1000 && width >= 700:
          this.scenario = 3;
          break;

        case width < 700 && width >= 500:
          this.scenario = 2;
          break;

        case width < 500:
          this.scenario = 1;
          break;
      }

      var potentialPresentation = this.state.allSteps.slice(this.state.refIndex, this.state.refIndex + this.scenario);
      if (potentialPresentation.length <= this.scenario) this.state.presentation = potentialPresentation;
      this.state.nextSteps = this.state.allSteps.slice(this.state.refIndex + this.scenario, this.dom.steps.length);
      this.updateDOM();
    }
  }, {
    key: "keepRefIndexInBounds",
    value: function keepRefIndexInBounds() {
      if (this.state.refIndex < 0) {
        this.state.refIndex = 0;
      }

      var refIndexMax = this.state.numSteps - this.scenario;

      if (this.state.refIndex > refIndexMax) {
        this.state.refIndex = refIndexMax;
      }
    }
  }, {
    key: "go2Step",
    value: function go2Step(stepNumber) {
      var diff = this.state.currentStep - stepNumber;

      if (diff > 0) {
        for (var i = 0; i < diff; i += 1) {
          this.prevStep();
        }
      }

      if (diff < 0) {
        for (var j = 0; j < -diff; j += 1) {
          this.nextStep();
        }
      }
    }
  }]);

  return WizardSteps;
}();

var Wizard =
/*#__PURE__*/
function () {
  function Wizard(element) {
    _classCallCheck(this, Wizard);

    this.dom = {
      wizard: element,
      steps: element.querySelector('.wizard-steps'),
      content: element.querySelector('.wizard-content'),
      footer: element.querySelector('.wizard-footer')
    };
    this.steps = null;
    this.content = null;
    this.footer = null;
  }

  _createClass(Wizard, [{
    key: "init",
    value: function init() {
      if (this.dom.footer) {
        this.footer = new WizardFooter(this.dom.footer);
        this.footer.init();
      } else {
        throw new Error('Wizard footer not found!');
      }

      if (this.dom.content) {
        this.content = new WizardContent(this.dom.content);
        this.content.init();
      } else {
        throw new Error('Wizard content not found!');
      }

      if (this.dom.steps) {
        this.steps = new WizardSteps(this.dom.steps);
        this.steps.init();
      } else {
        throw new Error('Wizard steps not found!');
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.steps) {
        this.steps.destroy();
      }

      if (this.content) {
        this.content.destroy();
      }

      if (this.footer) {
        this.footer.destroy();
      }
    }
  }]);

  return Wizard;
}();

var Stage =
/*#__PURE__*/
function () {
  /**
   * Common stage component for charts
   * @param {Object} props - The properties to initialize the stage
   * @param {HTMLElement} props.element - The DOM element to append the stage
   * @param {number} props.height - The height of the stage
   * @param {Object} props.margin - The top, right, bottom and left margins
   * @param {number} props.margin.top - The top margin
   * @param {number} props.margin.right - The right margin
   * @param {number} props.margin.bottom - The bottom margin
   * @param {number} props.margin.left - The left margin
   */
  function Stage(props) {
    _classCallCheck(this, Stage);

    this.element = props.element;
    this.margin = props.margin;
    this.height = props.height;
    this.width = this.getCanvasWidth();
    this.listeners = [];
  }
  /**
   * Creates the SVG and Canvas elements
   */


  _createClass(Stage, [{
    key: "init",
    value: function init() {
      if (!this.element.querySelector('svg')) {
        d3.select(this.element).append('svg').attr('width', this.width + this.margin.left + this.margin.right).attr('height', this.height + this.margin.top + this.margin.bottom).classed('chart', true).append('g').attr('transform', "translate(".concat(this.margin.left, ", ").concat(this.margin.top, ")")).classed('canvas', true);
      }
    }
    /**
     * Get the canvas DOM element
     * @return {HTMLElement} The canvas element
     */

  }, {
    key: "getCanvas",
    value: function getCanvas() {
      return d3.select(this.element).selectAll('.canvas');
    }
    /**
     * Get the width of the stage without margins
     * @return {number} The width value
     */

  }, {
    key: "getCanvasWidth",
    value: function getCanvasWidth() {
      return this.element.offsetWidth - this.margin.right - this.margin.left;
    }
    /**
     * Get the width of the canvas
     * @return {number} The width value
     */

  }, {
    key: "getWidth",
    value: function getWidth() {
      return this.element.offsetWidth;
    }
    /**
     * Set the window resize event to redraw the chart
     * @param {requestCallback} callback - The callback that gets triggered on window resize
     */

  }, {
    key: "onResize",
    value: function onResize(callback) {
      var _this75 = this;

      var delay = function delay() {
        setTimeout(function () {
          d3.select(_this75.element).select('svg').attr('width', _this75.getWidth());
          callback();
        }, 300);
      }; // TODO: Add event of menu opening/closing, not updating chart atm


      window.addEventListener('resize', delay);
      document.addEventListener('toggleNavigation', delay);
      this.listeners.push(delay);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.listeners.forEach(function (listener) {
        window.removeEventListener('resize', listener);
        document.removeEventListener('toggleNavigation', listener);
      });
    }
  }]);

  return Stage;
}();

var Axis =
/*#__PURE__*/
function () {
  /**
   * Create common axis component for chart
   * @param {props} props - The properties for the axis component
   * @param {string} props.position - The predifined position for the axis: top, right, bottom or left
   * @param {Object} props.canvas - The DOM element to append the axis
   * @param {Object} [props.x] - The D3 x axis object
   * @param {Object} [props.y] - The D3 y axis object
   * @param {number} props.width - The width of the canvas
   * @param {number} props.height - The height of the canvas
   * @param {number} props.fontSize - The font size of the text elements in the axis
   * @param {number} props.axisPadding - The padding between the axis and the text elements
   * @param {number} [props.animationSpeed] - The speed of the animation if data changes
   * @param {Object[]} [props.thresholds] - Thresholds that can be added to a graph
   * @param {number} [props.thresholds[].moreThan] - Sets the positive threshold
   * @param {number} [props.thresholds[].lessThan] - Sets the negative threshold
   * @param {string} [props.thresholds[].color] - Threshold color (green, yellow, orange, red)
   * @param {boolean} [props.hasDomain] - Boolean determining the axis style to include domain or not
   * @param {number} [props.ticks] - The approximate number of ticks
   * @param {number} [props.tickFormat] - The number format for the ticks value (see D3 tickFormat)
   */
  function Axis(props) {
    _classCallCheck(this, Axis);

    this.position = props.position;
    this.canvas = props.canvas;
    this.x = props.x;
    this.y = props.y;
    this.width = props.width;
    this.height = props.height;
    this.fontSize = props.fontSize;
    this.axisPadding = props.axisPadding;
    this.animationSpeed = props.animationSpeed || 400;
    this.thresholds = props.thresholds;
    this.hasDomain = props.hasDomain;
    this.ticks = props.ticks || this.width / 140;
    this.tickFormat = props.tickFormat;
  }
  /**
   * Initialize the axis
   */


  _createClass(Axis, [{
    key: "init",
    value: function init() {
      this.draw();

      if (this.thresholds) {
        this.drawThreshold();
      }
    }
    /**
     * Draw an axis based on the properties defined
     */

  }, {
    key: "draw",
    value: function draw() {
      var _this76 = this;

      var axisConfig;
      var selectAxis = this.canvas.select(".".concat(this.position, ".axis"));
      this.axis = selectAxis.empty() ? this.canvas.append('g') : selectAxis;

      switch (this.position) {
        case 'top':
          {
            axisConfig = d3.axisTop(this.x).tickSize(-this.height - this.axisPadding).ticks(this.ticks);
            break;
          }

        case 'right':
          {
            axisConfig = d3.axisRight(this.y).tickSize(this.width).ticks(this.ticks);
            break;
          }

        case 'bottom':
          {
            axisConfig = d3.axisBottom(this.x).tickSize(this.hasDomain ? this.axisPadding : this.height + this.axisPadding).tickPadding(this.axisPadding).ticks(this.ticks);

            if (this.hasDomain) {
              this.axis.attr('transform', "translate(0,".concat(this.height, ")"));
            }

            break;
          }

        case 'left':
          {
            axisConfig = d3.axisLeft(this.y).tickSize(this.hasDomain ? this.axisPadding : -this.width).tickPadding(this.axisPadding).ticks(this.ticks);
            break;
          }
      }

      if (this.tickFormat) {
        axisConfig.tickFormat(function (d) {
          return _this76.tickFormat(d);
        });
      }

      this.axis.classed(this.position, true).classed('axis', true).transition().duration(this.animationSpeed).call(axisConfig);

      if (!this.hasDomain) {
        this.axis.selectAll('.domain').remove();
      }

      this.axis.selectAll('.tick').selectAll('line').classed('solid', this.hasDomain).classed('zero', function (d) {
        return d === 0;
      });
      this.axis.selectAll('.tick').selectAll('text').attr('font-size', this.fontSize);
    }
    /**
     * Draw a threshold axis based on the properties defined
     * Threshold will be drawn on the opposite of the axis defined, e.g,
     * if the axis is on the left the threshold will be on the right
     */

  }, {
    key: "drawThreshold",
    value: function drawThreshold() {
      var _this77 = this;

      var equalsThreshold = function equalsThreshold(d) {
        var threshold;

        _this77.thresholds.forEach(function (t) {
          if (d === t.moreThan || d === t.lessThan) {
            threshold = t.color;
          }
        });

        return threshold;
      };

      this.axis.selectAll('.tick').classed('marked-for-removal', function (d) {
        return !!equalsThreshold(d);
      });
      this.axis.selectAll('.tick.marked-for-removal').remove();
      var axisConfig;
      var thresholdTicks = this.thresholds.map(function (threshold) {
        return threshold.moreThan || threshold.lessThan;
      });

      switch (this.position) {
        case 'top':
          {
            axisConfig = d3.axisBottom(this.x).tickPadding(this.axisPadding).tickSize(this.height + this.axisPadding).tickValues(thresholdTicks);
            break;
          }

        case 'right':
          {
            axisConfig = d3.axisLeft(this.y).tickSize(-this.width).tickValues(thresholdTicks);
            break;
          }

        case 'bottom':
          {
            axisConfig = d3.axisTop(this.x).tickPadding(this.axisPadding).tickSize(-this.height - this.axisPadding).tickValues(thresholdTicks);
            break;
          }

        case 'left':
          {
            axisConfig = d3.axisRight(this.y).tickSize(this.width).tickValues(thresholdTicks);
            break;
          }
      }

      if (this.tickFormat) {
        axisConfig.tickFormat(function (d) {
          return _this77.tickFormat(d);
        });
      }

      var selectThresholdAxis = this.canvas.select('.axis.threshold');
      this.thresholdAxis = selectThresholdAxis.empty() ? this.canvas.append('g') : selectThresholdAxis;
      this.thresholdAxis.classed('axis', true).classed('threshold', true).transition().duration(this.animationSpeed).call(axisConfig);
      this.thresholdAxis.selectAll('.domain').remove();
      this.thresholdAxis.selectAll('.tick').selectAll('line').attr('class', function (d) {
        return equalsThreshold(d);
      }).classed('threshold', true);
      this.thresholdAxis.selectAll('.tick').selectAll('text').attr('font-size', this.fontSize).attr('class', function (d) {
        return equalsThreshold(d);
      });
    }
  }]);

  return Axis;
}();

var HorizontalBarChart =
/*#__PURE__*/
function () {
  /**
   * Setup chart properties
   * @param {Object} props - The properties to initialize the stage
   * @param {Object} props.data - The data necessary to draw the chart
   * @param {HTMLElement} props.element - The DOM element to append the chart
   * @param {number} [props.height] - The height of the chart
   * @param {Object} [props.margin] - The top, right, bottom and left margins
   * @param {number} [props.margin.top] - The top margin
   * @param {number} [props.margin.right] - The right margin
   * @param {number} [props.margin.bottom] - The bottom margin
   * @param {number} [props.margin.left] - The left margin
   * @param {Object[]} [props.thresholds] - Thresholds that can be added to a chart
   * @param {number} [props.thresholds[].moreThan] - Sets the positive threshold
   * @param {number} [props.thresholds[].lessThan] - Sets the negative threshold
   * @param {string} [props.thresholds[].color] - Threshold color (green, yellow, orange, red)
   */
  function HorizontalBarChart(props) {
    _classCallCheck(this, HorizontalBarChart);

    this.data = props.data;
    this.element = props.element;
    this.margin = _objectSpread({
      left: 20,
      right: 30,
      top: 30,
      bottom: 30
    }, props.margin);
    this.height = props.height || 250;
    this.thresholds = props.thresholds;
    this.axisPadding = 8;
    this.fontSize = 14;
    this.barWidth = 4;
    this.animationSpeed = 400;
  }
  /**
   * Initialize the chart
   */


  _createClass(HorizontalBarChart, [{
    key: "init",
    value: function init() {
      this.stage = new Stage({
        element: this.element,
        margin: this.margin,
        height: this.height
      });
      this.stage.init();
      this.stage.onResize(this.draw.bind(this));
      this.canvas = this.stage.getCanvas();
      this.draw();
    }
    /**
     * Draw the chart based on data
     * @param data - The data necessary to draw the chart
     */

  }, {
    key: "draw",
    value: function draw(data) {
      var _this78 = this;

      this.data = data || this.data;
      this.width = this.stage.getCanvasWidth();
      var x = d3.scaleLinear().domain([d3.min(this.data, function (d) {
        return d.value;
      }) >= 0 ? 0 : d3.min(this.data, function (d) {
        return d.value;
      }), d3.max(this.data, function (d) {
        return d.value;
      })]).nice().range([0, this.width]);
      var axis = new Axis({
        position: 'bottom',
        canvas: this.canvas,
        x: x,
        width: this.width,
        height: this.height,
        fontSize: this.fontSize,
        axisPadding: this.axisPadding,
        thresholds: this.thresholds,
        tickFormat: function tickFormat(d) {
          return d3.format('.2s')(d).replace('.0', '');
        }
      });
      axis.init();
      var y = d3.scaleBand().domain(d3.range(this.data.length)).rangeRound([this.axisPadding, this.height]).paddingInner(1).paddingOuter(0.2);
      var bars = this.canvas.classed('bar-chart', true).selectAll('.bar').data(this.data);
      var hasLabelSpace = this.height / this.data.length > this.fontSize + this.axisPadding + this.barWidth * 2 + 8;

      var barPosition = function barPosition(selection) {
        selection.attr('transform', function (d, i) {
          return "translate(".concat(x(0, d.value), ", ").concat(y(i), ")");
        });
      };

      var getThresholdsClass = function getThresholdsClass(selection) {
        selection.attr('class', function (d) {
          var color;

          if (_this78.thresholds) {
            _this78.thresholds.sort(function (a, b) {
              return a.moreThan - b.moreThan || b.lessThan - a.lessThan;
            }).forEach(function (t) {
              if (t.moreThan && d.value >= t.moreThan || t.lessThan && d.value <= t.lessThan) {
                color = t.color;
              }
            });

            return color;
          }
        });
      };

      var barLength = function barLength(selection) {
        selection.attr('stroke-width', _this78.barWidth).call(getThresholdsClass).classed('line', true).transition().duration(_this78.animationSpeed).attr('x2', function (d) {
          return x(d.value) - x(0);
        });
      };

      var barLabel = function barLabel(selection) {
        selection.attr('y', '-6').attr('text-anchor', 'start').text(function (d) {
          return d.label;
        }).classed('label', true).classed('text', true).classed('hidden', !hasLabelSpace).transition().duration(_this78.animationSpeed).attr('x', 4);
      };

      var barValue = function barValue(selection) {
        selection.attr('y', '-6').attr('text-anchor', function (d) {
          return d.value >= 0 ? 'start' : 'end';
        }).text(function (d) {
          return d3.format(',')(d.value).replace(/,/g, ' ');
        }).classed('label', true).classed('value', true).classed('hidden', !hasLabelSpace).transition().duration(_this78.animationSpeed).attr('x', function (d, i, j) {
          var labelTextLength = d3.select(j[i].parentNode).select('.label.text').node().getComputedTextLength() + 16;
          return d.value >= 0 ? labelTextLength : -4;
        });
      };

      var barsEnter = bars.enter().append('g').classed('bar', true).call(barPosition);

      var barHover = function barHover(selection) {
        var all = barsEnter.merge(bars).selectAll('.line');
        var allLabels = barsEnter.merge(bars).selectAll('.label');
        selection.classed('line-hover', true).attr('x1', -_this78.width).attr('x2', _this78.width).attr('stroke', 'blue').attr('opacity', '0').attr('stroke-width', y(1) - y(0)).on('mouseover', function () {
          var hovered = d3.select(this.parentNode).select('.line');
          var labelValue = d3.select(this.parentNode).select('.label.value');
          var labelText = d3.select(this.parentNode).select('.label.text');
          labelValue.classed('hidden', false);
          labelText.classed('hidden', false);
          all.classed('inactive', true);
          allLabels.classed('inactive', true);
          hovered.classed('active', true);
          hovered.classed('inactive', false);
          labelValue.classed('active', true);
          labelValue.classed('inactive', false);
          labelText.classed('active', true);
          labelText.classed('inactive', false);
        }).on('mouseout', function () {
          var hovered = d3.select(this.parentNode).select('.line');
          var labelValue = d3.select(this.parentNode).select('.label.value');
          var labelText = d3.select(this.parentNode).select('.label.text');
          labelValue.classed('hidden', !hasLabelSpace);
          labelText.classed('hidden', !hasLabelSpace);
          all.classed('inactive', false);
          allLabels.classed('inactive', false);
          hovered.classed('active', false);
          labelValue.classed('active', false);
          labelText.classed('active', false);
        });
      }; // Enter


      barsEnter.append('line').classed('line', true);
      barsEnter.select('.line').call(barLength);
      barsEnter.append('text').call(barLabel);
      barsEnter.append('text').call(barValue);
      barsEnter.append('line').call(barHover); // Update

      bars.call(barPosition);
      bars.select('.line').call(barLength);
      bars.select('.label.text').call(barLabel);
      bars.select('.label.value').call(barValue);
      bars.select('.line-hover').call(barHover); // Remove

      bars.exit().remove();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.stage.destroy();
    }
  }]);

  return HorizontalBarChart;
}();

var VerticalBarChart =
/*#__PURE__*/
function () {
  /**
   * Setup chart properties
   * @param {Object} props - The properties to initialize the stage
   * @param {Object[]} props.data - The data necessary to draw the chart
   * @param {HTMLElement} props.element - The DOM element to append the chart
   * @param {number} [props.height] - The height of the chart
   * @param {Object} [props.margin] - The top, right, bottom and left margins
   * @param {number} [props.margin.top] - The top margin
   * @param {number} [props.margin.right] - The right margin
   * @param {number} [props.margin.bottom] - The bottom margin
   * @param {number} [props.margin.left] - The left margin
   * @param {Object[]} [props.thresholds] - Thresholds that can be added to a chart
   * @param {number} [props.thresholds[].moreThan] - Sets the positive threshold
   * @param {number} [props.thresholds[].lessThan] - Sets the negative threshold
   * @param {string} [props.thresholds[].color] - Threshold color (green, yellow, orange, red)
   */
  function VerticalBarChart(props) {
    _classCallCheck(this, VerticalBarChart);

    this.data = props.data;
    this.element = props.element;
    this.margin = _objectSpread({
      left: 40,
      right: 30,
      top: 30,
      bottom: 30
    }, props.margin);
    this.height = props.height || 250;
    this.thresholds = props.thresholds;
    this.axisPadding = 8;
    this.fontSize = 14;
    this.barWidth = 4;
    this.animationSpeed = 400;
  }
  /**
   * Initialize the chart
   */


  _createClass(VerticalBarChart, [{
    key: "init",
    value: function init() {
      this.stage = new Stage({
        element: this.element,
        margin: this.margin,
        height: this.height
      });
      this.stage.init();
      this.stage.onResize(this.draw.bind(this));
      this.canvas = this.stage.getCanvas();
      this.draw();
    }
    /**
     * Draw the chart based on data
     * @param {Object[]} data - The data necessary to draw the chart
     */

  }, {
    key: "draw",
    value: function draw(data) {
      var _this79 = this;

      this.data = data || this.data;
      this.width = this.stage.getCanvasWidth();
      var x = d3.scaleBand().domain(d3.range(this.data.length)).rangeRound([0, this.width]).paddingInner(1).paddingOuter(0.4);
      var y = d3.scaleLinear().domain([d3.min(this.data, function (d) {
        return d.value;
      }) >= 0 ? 0 : d3.min(this.data, function (d) {
        return d.value;
      }), d3.max(this.data, function (d) {
        return d.value;
      })]).nice().range([this.height, 0]);
      var axis = new Axis({
        position: 'left',
        canvas: this.canvas,
        y: y,
        width: this.width,
        height: this.height,
        fontSize: this.fontSize,
        axisPadding: this.axisPadding,
        thresholds: this.thresholds,
        ticks: this.height / 80
      });
      axis.init();
      var barDistance = x(1) - x(0);
      var hasTextSpace = true;
      var hasNegativeValues = false;
      this.data.forEach(function (d) {
        var valueLength = d.value.toString().length * _this79.fontSize / 1.5;
        var labelLength = d.label.length * _this79.fontSize / 1.5;

        if (hasTextSpace) {
          hasTextSpace = valueLength < barDistance && labelLength < barDistance;
        }

        if (!hasNegativeValues && d.value < 0) {
          hasNegativeValues = true;
        }
      });
      var bars = this.canvas.classed('bar-chart', true).selectAll('.bar').data(this.data);

      var barPosition = function barPosition(selection) {
        selection.attr('transform', function (d, i) {
          return "translate(".concat(x(i), ", ").concat(y(0, d.value), ")");
        });
      };

      var barLength = function barLength(selection) {
        selection.attr('stroke-width', _this79.barWidth).attr('class', function (d) {
          var color;

          if (_this79.thresholds) {
            _this79.thresholds.sort(function (a, b) {
              return a.moreThan - b.moreThan || b.lessThan - a.lessThan;
            }).forEach(function (t) {
              if (t.moreThan && d.value >= t.moreThan || t.lessThan && d.value <= t.lessThan) {
                color = t.color;
              }
            });

            return color;
          }
        }).classed('line', true).transition().duration(_this79.animationSpeed).attr('y2', function (d) {
          return y(d.value) - y(0);
        });
      };

      var barValue = function barValue(selection) {
        selection.attr('text-anchor', 'middle').text(function (d) {
          return d.value;
        }).classed('label', true).classed('value', true).classed('hidden', !hasTextSpace).transition().duration(_this79.animationSpeed).attr('y', function (d) {
          return y(d.value) - y(0) + (d.value >= 0 ? -4 : _this79.fontSize);
        });
      };

      var barLabel = function barLabel(selection) {
        selection.attr('y', function (d) {
          return hasNegativeValues ? _this79.height - y(0, d.value) + _this79.margin.bottom : _this79.fontSize + 2;
        }).attr('text-anchor', 'middle').text(function (d) {
          return d.label;
        }).classed('label', true).classed('text', true).classed('hidden', !hasTextSpace).transition().duration(_this79.animationSpeed);
      };

      var barsEnter = bars.enter().append('g').classed('bar', true).call(barPosition);

      var barHover = function barHover(selection) {
        var all = barsEnter.merge(bars).selectAll('.line');
        var allLabelsValue = barsEnter.merge(bars).selectAll('.label.value');
        var allLabelsText = barsEnter.merge(bars).selectAll('.label.text');
        selection.classed('line-hover', true).attr('y1', -_this79.height).attr('y2', _this79.height).attr('stroke', 'blue').attr('opacity', '0').attr('stroke-width', barDistance).on('mouseover', function () {
          var hovered = d3.select(this.parentNode).select('.line');
          var labelValue = d3.select(this.parentNode).select('.label.value');
          var labelText = d3.select(this.parentNode).select('.label.text');
          labelValue.classed('hidden', false);
          labelText.classed('hidden', false);
          all.classed('inactive', true);
          allLabelsValue.classed('inactive', true);
          allLabelsText.classed('active', hasTextSpace);
          hovered.classed('active', true);
          hovered.classed('inactive', false);
          labelValue.classed('active', true);
          labelValue.classed('inactive', false);
          labelText.classed('active', true);
          labelText.classed('inactive', false);
        }).on('mouseout', function () {
          var hovered = d3.select(this.parentNode).select('.line');
          var labelValue = d3.select(this.parentNode).select('.label.value');
          var labelText = d3.select(this.parentNode).select('.label.text');
          labelValue.classed('hidden', !hasTextSpace);
          labelText.classed('hidden', !hasTextSpace);
          all.classed('inactive', false);
          allLabelsValue.classed('inactive', false);
          allLabelsText.classed('inactive', !hasTextSpace);
          hovered.classed('active', false);
          labelValue.classed('active', false);
          labelText.classed('active', false);
        });
      }; // Enter


      barsEnter.append('line').classed('line', true);
      barsEnter.select('.line').call(barLength);
      barsEnter.append('text').call(barValue);
      barsEnter.append('text').call(barLabel);
      barsEnter.append('line').call(barHover); // Update

      bars.call(barPosition);
      bars.select('.line').call(barLength);
      bars.select('.label.value').call(barValue);
      bars.select('.label.text').call(barLabel);
      bars.select('.line-hover').call(barHover); // Remove

      bars.exit().remove();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.stage.destroy();
    }
  }]);

  return VerticalBarChart;
}();

var LineChart =
/*#__PURE__*/
function () {
  /**
   * Setup chart properties
   * @param {Object} props - The properties to initialize the stage
   * @param {Object} props.data - The data necessary to draw the chart
   * @param {HTMLElement} props.element - The DOM element to append the chart
   * @param {number} [props.height] - The height of the chart
   * @param {Object} [props.margin] - The top, right, bottom and left margins
   * @param {number} [props.margin.top] - The top margin
   * @param {number} [props.margin.right] - The right margin
   * @param {number} [props.margin.bottom] - The bottom margin
   * @param {number} [props.margin.left] - The left margin
   * @param {Object[]} [props.thresholds] - Thresholds that can be added to a chart
   * @param {number} [props.thresholds[].moreThan] - Sets the positive threshold
   * @param {number} [props.thresholds[].lessThan] - Sets the negative threshold
   * @param {string} [props.thresholds[].color] - Threshold color (green, yellow, orange, red)
   * @param {Object} [props.y] - Y axis properties
   * @param {boolean} [props.y.startFromZero] - If Y axis starts on zero
   * @param {boolean} [props.y.isLogarithmic] - If Y axis is logarithmic
   * @param {string} [props.y.unit] - The Y axis unit
   * @param {Object} [props.x] - X axis properties
   * @param {boolean} [props.x.isTime] - If X axis is time-based
   * @param {string} [props.x.unit] - The X axis unit
   */
  function LineChart(props) {
    _classCallCheck(this, LineChart);

    this.dom = {
      id: props.element.getAttribute('id') || Date.now()
    };
    this.element = props.element;
    this.height = props.height || 250;
    this.margin = _objectSpread({
      top: 25,
      bottom: 35,
      right: 25,
      left: 35
    }, props.margin);
    this.y = _objectSpread({
      startFromZero: true,
      isLogarithmic: false,
      unit: ''
    }, props.y);
    this.x = _objectSpread({
      isTime: true,
      unit: ''
    }, props.x);
    this.data = props.data;
    this.thresholds = props.thresholds;
  }
  /**
   * Initialize the chart
   */


  _createClass(LineChart, [{
    key: "init",
    value: function init() {
      this.stage = new Stage({
        element: this.element,
        margin: this.margin,
        height: this.height
      });
      this.stage.init();
      this.stage.onResize(this.draw.bind(this));
      this.canvas = this.stage.getCanvas();

      if (this.x.isTime) {
        this.formatData();
      }

      this.draw();
    }
    /**
     * Draw the chart based on data
     * @param {Object[]} data - The data necessary to draw the chart
     */

  }, {
    key: "draw",
    value: function draw(data) {
      var _this80 = this;

      var jsonData = data || this.data;
      this.width = this.stage.getCanvasWidth();
      /**
       * X axis
       */
      // Time scale: default (time series)

      var x = d3.scaleTime().domain(d3.extent(jsonData.common)).nice().range([0, this.width]); // Linear scale: not time series

      if (!this.x.isTime) {
        x = d3.scaleLinear().domain(d3.extent(jsonData.common)).nice().range([0, this.width]);
      } // Create new X axis


      var xAxis = new Axis({
        position: 'bottom',
        canvas: this.canvas,
        x: x,
        width: this.width,
        height: this.height,
        fontSize: 14,
        axisPadding: 8,
        hasDomain: true
      }); // Init X axis & append to Canvas

      xAxis.init();
      /**
       * Y axis
       */
      // Linear scale: default (linear, start from zero)

      var y = d3.scaleLinear().domain([0, d3.max(jsonData.series, function (d) {
        return d3.max(d.values);
      })]).nice().range([this.height, 0]);
      var tScale = d3.scaleLinear().domain([0, d3.max(jsonData.series, function (d) {
        return d3.max(d.values);
      })]).nice().range([0, 100]); //  Logarithmic scale

      if (this.y.isLogarithmic) {
        y = d3.scaleLog().domain([d3.min(jsonData.series, function (d) {
          return d3.min(d.values);
        }), d3.max(jsonData.series, function (d) {
          return d3.max(d.values);
        })]).nice().range([this.height, 0]);
      } //  Linear scale :not starting from zero


      if (!this.y.startFromZero) {
        y = d3.scaleLinear().domain([d3.min(jsonData.series, function (d) {
          return d3.min(d.values);
        }), d3.max(jsonData.series, function (d) {
          return d3.max(d.values);
        })]).nice().range([this.height, 0]);
        tScale = d3.scaleLinear().domain([d3.min(jsonData.series, function (d) {
          return d3.min(d.values);
        }), d3.max(jsonData.series, function (d) {
          return d3.max(d.values);
        })]).nice().range([0, 100]);
      } // Create new Y axis


      var yAxis = new Axis({
        position: 'left',
        canvas: this.canvas,
        y: y,
        width: this.width,
        height: this.height,
        fontSize: 14,
        axisPadding: 10,
        hasDomain: false,
        ticks: this.height / 60,
        thresholds: this.thresholds
      }); // Init Y axis & append to Canvas

      yAxis.init();
      /**
       * Value line (path)
       */
      // Default path: date information

      var valueline = d3.line().defined(function (d) {
        return !isNaN(d);
      }).x(function (d, i) {
        return x(jsonData.common[i]);
      }).y(function (d) {
        return y(d);
      }); // Append path to Canvas

      var lines = this.canvas.classed('line-chart', true).selectAll('.line').data(jsonData.series); // Enter

      lines.enter().append('path').classed('line', true).attr('d', function (d) {
        return valueline(d.values);
      }).attr('name', function (d) {
        return d.name;
      }); // Update

      this.canvas.selectAll('.line').transition().duration(400).attr('d', function (d) {
        return valueline(d.values);
      }).attr('name', function (d) {
        return d.name;
      }); // Exit

      lines.exit().remove(); // Threshold

      if (this.thresholds) {
        var minValue = 0;

        if (!this.y.startFromZero) {
          minValue = d3.min(jsonData.series, function (d) {
            return d3.min(d.values);
          });
        }

        var maxValue = d3.max(jsonData.series, function (d) {
          return d3.max(d.values);
        });
        var input = this.thresholds;
        var output = [];
        output.push({
          offset: tScale(minValue),
          color: 'line'
        });
        input.forEach(function (element) {
          output.push({
            offset: tScale(element.moreThan || element.lessThan),
            color: 'line'
          });
          output.push({
            offset: tScale(element.moreThan || element.lessThan),
            color: 'line'
          });
        });
        output.push({
          offset: tScale(maxValue),
          color: 'line'
        });
        output.sort(function (a, b) {
          return a.offset - b.offset;
        });
        output.forEach(function (element) {
          element.offset = element.offset + '%';
        }); // LessThan

        var lessThanArray = input.filter(function (element) {
          if (element.lessThan) {
            return element;
          }
        });

        if (lessThanArray.length > 0) {
          lessThanArray.sort(function (a, b) {
            return a.lessThan - b.lessThan;
          });
          var j = 0;

          for (var i = 0; i < lessThanArray.length; i += 1) {
            output[j].color = lessThanArray[i].color;
            output[j + 1].color = lessThanArray[i].color;
            j += 2;
          }
        } // MoreThan


        var moreThanArray = input.filter(function (element) {
          if (element.moreThan) {
            return element;
          }
        });

        if (moreThanArray.length > 0) {
          moreThanArray.sort(function (a, b) {
            return b.moreThan - a.moreThan;
          });

          var _j = output.length - 1;

          for (var _i5 = 0; _i5 < moreThanArray.length; _i5 += 1) {
            output[_j].color = moreThanArray[_i5].color;
            output[_j - 1].color = moreThanArray[_i5].color;
            _j -= 2;
          }
        }

        this.canvas.append('linearGradient').classed('linear-gradient', true).attr('id', "gradient-".concat(this.element.id)).attr('gradientUnits', 'userSpaceOnUse').attr('x1', 0).attr('y1', this.height).attr('x2', 0).attr('y2', 0).selectAll('stop').data(output).enter().append('stop').attr('offset', function (d) {
          return d.offset;
        }).attr('stop-color', function (d) {
          return d.color;
        }); // Paint the lines with threshold colors

        var pathLines = this.element.querySelectorAll('path.line');
        Array.from(pathLines).forEach(function (line) {
          line.setAttribute('style', "stroke: url(#gradient-".concat(_this80.element.id, ")"));
        });
      }
    }
  }, {
    key: "formatData",
    value: function formatData() {
      var _this81 = this;

      var parseTime = d3.timeParse('%Y-%m-%d');
      this.data.common.forEach(function (date, i) {
        if (!(date instanceof Date)) {
          _this81.data.common[i] = parseTime(date);
        }
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.stage.destroy();
    }
  }]);

  return LineChart;
}();

exports.Accordion = Accordion;
exports.Appbar = Appbar;
exports.Appnav = Appnav;
exports.Calendar = Calendar;
exports.Card = Card;
exports.Datepicker = Datepicker;
exports.Dialog = Dialog;
exports.Drag = Drag;
exports.Dropdown = Dropdown;
exports.Gauge = Gauge;
exports.Layout = Layout;
exports.Map = Map;
exports.Menu = Menu;
exports.MultiPanelTile = MultiPanelTile;
exports.Notification = Notification;
exports.NotificationLog = NotificationLog;
exports.Page = Page;
exports.Tile = Tile;
exports.Pagination = Pagination;
exports.Pill = Pill;
exports.Prefill = Prefill;
exports.SignIn = SignIn;
exports.Slider = Slider;
exports.Spinner = Spinner;
exports.TabGroup = TabGroup;
exports.TableSelectable = TableSelectable;
exports.Tree = Tree;
exports.Wizard = Wizard;
exports.HorizontalBarChart = HorizontalBarChart;
exports.VerticalBarChart = VerticalBarChart;
exports.LineChart = LineChart;