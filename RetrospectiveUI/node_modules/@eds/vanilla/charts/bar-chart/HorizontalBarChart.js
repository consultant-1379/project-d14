import * as d3 from 'd3';

import { Stage } from '../common/Stage';
import { Axis } from '../common/Axis';

export class HorizontalBarChart {

  /**
   * Setup chart properties
   * @param {Object} props - The properties to initialize the stage
   * @param {Object} props.data - The data necessary to draw the chart
   * @param {HTMLElement} props.element - The DOM element to append the chart
   * @param {number} [props.height] - The height of the chart
   * @param {Object} [props.margin] - The top, right, bottom and left margins
   * @param {number} [props.margin.top] - The top margin
   * @param {number} [props.margin.right] - The right margin
   * @param {number} [props.margin.bottom] - The bottom margin
   * @param {number} [props.margin.left] - The left margin
   * @param {Object[]} [props.thresholds] - Thresholds that can be added to a chart
   * @param {number} [props.thresholds[].moreThan] - Sets the positive threshold
   * @param {number} [props.thresholds[].lessThan] - Sets the negative threshold
   * @param {string} [props.thresholds[].color] - Threshold color (green, yellow, orange, red)
   */
  constructor(props) {
    this.data = props.data;
    this.element = props.element;
    this.margin = {
      left: 20,
      right: 30,
      top: 30,
      bottom: 30,
      ...props.margin,
    };
    this.height = props.height || 250;
    this.thresholds = props.thresholds;
    this.axisPadding = 8;
    this.fontSize = 14;
    this.barWidth = 4;
    this.animationSpeed = 400;
  }

  /**
   * Initialize the chart
   */
  init() {
    this.stage = new Stage({
      element: this.element,
      margin: this.margin,
      height: this.height
    });
    this.stage.init();
    this.stage.onResize(this.draw.bind(this));

    this.canvas = this.stage.getCanvas();
    this.draw();
  }

  /**
   * Draw the chart based on data
   * @param data - The data necessary to draw the chart
   */
  draw(data) {
    this.data = data || this.data;
    this.width = this.stage.getCanvasWidth();

    const x = d3.scaleLinear()
      .domain([
        d3.min(this.data, d => d.value) >= 0 ? 0 : d3.min(this.data, d => d.value),
        d3.max(this.data, d => d.value)
      ])
      .nice()
      .range([0, this.width]);

    const axis = new Axis({
      position: 'bottom',
      canvas: this.canvas,
      x: x,
      width: this.width,
      height: this.height,
      fontSize: this.fontSize,
      axisPadding: this.axisPadding,
      thresholds: this.thresholds,
      tickFormat: (d) => d3.format('.2s')(d).replace('.0', '')
    });
    axis.init();

    const y = d3.scaleBand()
      .domain(d3.range(this.data.length))
      .rangeRound([this.axisPadding, this.height])
      .paddingInner(1)
      .paddingOuter(0.2);

    const bars = this.canvas
      .classed('bar-chart', true)
      .selectAll('.bar').data(this.data);

    const hasLabelSpace = (this.height / this.data.length) > (this.fontSize + this.axisPadding + this.barWidth * 2 + 8);

    const barPosition = selection => {
      selection.attr('transform', (d, i) => `translate(${x(0, d.value)}, ${y(i)})`);
    };

    const getThresholdsClass = selection => {
      selection.attr('class', d => {
        let color;
        if (this.thresholds) {
          this.thresholds
            .sort((a,b) => a.moreThan - b.moreThan || b.lessThan - a.lessThan)
            .forEach(t => {
              if (t.moreThan && d.value >= t.moreThan || t.lessThan && d.value <= t.lessThan) {
                color = t.color;
              }
            });
          return color;
        }
      });
    };

    const barLength = selection => {
      selection
        .attr('stroke-width', this.barWidth)
        .call(getThresholdsClass)
        .classed('line', true)
        .transition()
        .duration(this.animationSpeed)
        .attr('x2', d => x(d.value) - x(0));
    };

    const barLabel = selection => {
      selection
        .attr('y', '-6')
        .attr('text-anchor', 'start')
        .text(d => d.label)
        .classed('label', true)
        .classed('text', true)
        .classed('hidden', !hasLabelSpace)
        .transition()
        .duration(this.animationSpeed)
        .attr('x', 4);
    };

    const barValue = selection => {
      selection
        .attr('y', '-6')
        .attr('text-anchor', d => d.value >= 0 ? 'start' : 'end')
        .text(d => d3.format(',')(d.value).replace(/,/g, ' '))
        .classed('label', true)
        .classed('value', true)
        .classed('hidden', !hasLabelSpace)
        .transition()
        .duration(this.animationSpeed)
        .attr('x', (d, i, j) => {
          const labelTextLength = d3.select(j[i].parentNode).select('.label.text').node().getComputedTextLength() + 16;
          return d.value >= 0 ? labelTextLength : -4;
        });
    };

    const barsEnter = bars.enter()
      .append('g')
      .classed('bar', true)
      .call(barPosition);

    const barHover = selection => {
      const all = barsEnter.merge(bars).selectAll('.line');
      const allLabels = barsEnter.merge(bars).selectAll('.label');
      selection
        .classed('line-hover', true)
        .attr('x1', -this.width)
        .attr('x2', this.width)
        .attr('stroke', 'blue')
        .attr('opacity', '0')
        .attr('stroke-width', y(1) - y(0))
        .on('mouseover', function () {
          const hovered = d3.select(this.parentNode).select('.line');
          const labelValue = d3.select(this.parentNode).select('.label.value');
          const labelText = d3.select(this.parentNode).select('.label.text');

          labelValue.classed('hidden', false);
          labelText.classed('hidden', false);
          all.classed('inactive', true);
          allLabels.classed('inactive', true);

          hovered.classed('active', true);
          hovered.classed('inactive', false);
          labelValue.classed('active', true);
          labelValue.classed('inactive', false);
          labelText.classed('active', true);
          labelText.classed('inactive', false);
        })
        .on('mouseout', function () {
          const hovered = d3.select(this.parentNode).select('.line');
          const labelValue = d3.select(this.parentNode).select('.label.value');
          const labelText = d3.select(this.parentNode).select('.label.text');

          labelValue.classed('hidden', !hasLabelSpace);
          labelText.classed('hidden', !hasLabelSpace);
          all.classed('inactive', false);
          allLabels.classed('inactive', false);

          hovered.classed('active', false);
          labelValue.classed('active', false);
          labelText.classed('active', false);
        });
    };

    // Enter
    barsEnter
      .append('line')
      .classed('line', true);

    barsEnter
      .select('.line')
      .call(barLength);

    barsEnter
      .append('text')
      .call(barLabel);

    barsEnter
      .append('text')
      .call(barValue);

    barsEnter
      .append('line')
      .call(barHover);

    // Update
    bars
      .call(barPosition);

    bars
      .select('.line')
      .call(barLength);

    bars
      .select('.label.text')
      .call(barLabel);

    bars
      .select('.label.value')
      .call(barValue);

    bars
      .select('.line-hover')
      .call(barHover);

    // Remove
    bars.exit().remove();
  }

  destroy() {
    this.stage.destroy();
  }

}
