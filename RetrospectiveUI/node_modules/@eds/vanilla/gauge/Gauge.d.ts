interface Options {
  arc: {
    radius: {
      inner: number;
      outer: number;
    };
    angle: {
      start: number;
      end: number;
    }
    scale: number;
  };
  props: {
    class: string;
  };
}

interface GaugeSettings {
  value: number;
  min: number;
  max: number;
  units: string;
  decimals?: number;
  limits?: {
    from: number;
    to: number;
    color: string;
    label: string;
  }[];
}

export declare class Gauge {
  private dom: {
    gauge: HTMLElement;
    id: string;
    settings: string;
    valueArc: SVGPathElement;
    valueLabel: SVGGElement;
  };

  data: GaugeSettings;

  constructor(element: HTMLElement);

  private setCanvas(selector: string, scale: number): HTMLCanvasElement;

  private injectTexture(): void;

  private getScale(size?: 'small' | 'medium' | 'large'): number;

  private createArc(options: Options): HTMLCanvasElement;

  private drawArc(canvas: HTMLCanvasElement, options: Options): HTMLCanvasElement;

  private drawLabel(canvas: HTMLCanvasElement, options: Options): HTMLCanvasElement;

  private parseData(): JSON;

  private setDataDefaults(): void;

  private setRandomData(): void;

  private val2angle(value: number): any;

  private angle2value(angle, parentThis: Gauge): void;

  private setLabelAngle(angle, parentThis: Gauge): void;

  private arcTween(newAngle, oldAngle, _parentThis: Gauge): Function;

  private setArcColor(value, limits: Array<{}>, _parentThis: Gauge): void;

  private drawChart(): void;

  init(): void;

  destroy(): void;

  setValue(value: number|string): void;
}
