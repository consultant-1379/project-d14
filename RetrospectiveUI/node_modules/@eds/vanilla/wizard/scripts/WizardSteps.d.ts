export interface WizardStepState {
  currentStep: number;
  refIndex: number;
  numSteps: number;
  allSteps: number[];
  presentation: number[];
  prevSteps: number[];
  nextSteps: number[];
}

export declare class WizardSteps {
  private dom: {
    wizard: HTMLElement;
    arrows: NodeListOf<Element>;
    steps: NodeListOf<Element>;
    points: NodeListOf<Element>;
    id: string;
  };
  private state: WizardStepState;
  private scenario: number;
  private type: string;
  private events: {
    wizardState: CustomEvent;
  };

  constructor(element: HTMLElement);

  private addEventListeners(): void;

  private removeEventListeners(): void;

  private updateState(event: CustomEvent): void;

  private showArrow(arrowDirection: 'right' | 'left'): void;

  private hideArrow(arrowDirection: 'right' | 'left'): void;

  private setInitState(): void;

  private showNextSteps(): void;

  private showPrevSteps(): void;

  private nextStep(): void;

  private prevStep(): void;

  private updateDOM(): void;

  private updateDOMArrows(): void;

  private updateDOMCurrentState(): void;

  private updateDOMStepsVisibility(): void;

  private updateDOMContext(): void;

  private setInitContext(): void;

  private updateScenario(): void;

  private keepRefIndexInBounds(): void;

  private go2Step(stepNumber: number): void;

  init(): void;

  destroy(): void;
}
