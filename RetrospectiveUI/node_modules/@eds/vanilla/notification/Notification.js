'use strict';

export class Notification {
  constructor(props) {
    this.dom = {
      notification: null,
      close: null,
    };
    this.props = props || {
      title: 'No notification title',
      description: 'You are missing adding the description also',
    };
  }

  init() {
    this.createNotification();
    this.addEventListeners();
  }

  destroy() {
    this.removeEventListeners();
  }

  removeEventListeners() {
    if (this.dom.notification && this.dom.notification.parentNode) {
      this.dom.notification.removeEventListener('click', (e) => this.handleClick(e), false);
      this.dom.notification.parentNode.removeChild(this.dom.notification);
    }
  }

  addEventListeners() {
    this.dom.notification.addEventListener('click', (e) => this.handleClick(e), false);
  }

  getNotification() {
    return this.dom.notification;
  }

  createNotification() {
    this.dom.notification = document.createElement('div');
    this.dom.notification.classList.add('notification');

    const notificationTopRow = document.createElement('div');
    notificationTopRow.classList.add('top-row');

    const notificationTitle = document.createElement('div');
    notificationTitle.classList.add('title');
    notificationTitle.innerText = this.props.title;
    notificationTopRow.appendChild(notificationTitle);

    const notificationClose = document.createElement('i');
    notificationClose.className = 'icon icon-cross close';
    notificationTopRow.appendChild(notificationClose);

    const notificationDescription = document.createElement('div');
    notificationDescription.classList.add('description');
    notificationDescription.innerText = this.props.description;

    this.dom.notification.appendChild(notificationTopRow);
    this.dom.notification.appendChild(notificationDescription);

    this.dom.close = notificationClose;

    document.body.appendChild(this.dom.notification);

    /**
     * setTimeout is needed for CSS animation to work when creating new elements
     * (10ms for Firefox animation to work properly)
     */
    setTimeout(() => {
      this.dom.notification.classList.add('live');
    }, 10);

    if (this.props.timeout) {
      setTimeout(() => {
        this.destroy();
      }, this.props.timeout);
    }
  }

  handleClick(e) {
    if (e.target !== this.dom.close && this.props.action) {
      this.props.action();
    }
    this.destroy();
  }
}
